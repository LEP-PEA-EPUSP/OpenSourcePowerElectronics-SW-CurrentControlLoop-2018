
PWM_ModSenoidal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          000000d4  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000dc  200000dc  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_line   00004cee  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000133e0  00000000  00000000  00024d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002584  00000000  00000000  00038106  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0003a690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0003af30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a36  00000000  00000000  0003ba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f486  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bc0  00000000  00000000  0003f504  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00005d48  00000000  00000000  000410c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800304c 	.word	0x0800304c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800304c 	.word	0x0800304c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b97a 	b.w	8000d08 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	468c      	mov	ip, r1
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	9e08      	ldr	r6, [sp, #32]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d151      	bne.n	8000ae0 <__udivmoddi4+0xb4>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d96d      	bls.n	8000b1e <__udivmoddi4+0xf2>
 8000a42:	fab2 fe82 	clz	lr, r2
 8000a46:	f1be 0f00 	cmp.w	lr, #0
 8000a4a:	d00b      	beq.n	8000a64 <__udivmoddi4+0x38>
 8000a4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a68:	0c25      	lsrs	r5, r4, #16
 8000a6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a6e:	fa1f f987 	uxth.w	r9, r7
 8000a72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a7a:	fb08 f309 	mul.w	r3, r8, r9
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x6c>
 8000a82:	19ed      	adds	r5, r5, r7
 8000a84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a88:	f080 8123 	bcs.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	f240 8120 	bls.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a92:	f1a8 0802 	sub.w	r8, r8, #2
 8000a96:	443d      	add	r5, r7
 8000a98:	1aed      	subs	r5, r5, r3
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa8:	fb00 f909 	mul.w	r9, r0, r9
 8000aac:	45a1      	cmp	r9, r4
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x98>
 8000ab0:	19e4      	adds	r4, r4, r7
 8000ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab6:	f080 810a 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000aba:	45a1      	cmp	r9, r4
 8000abc:	f240 8107 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	eba4 0409 	sub.w	r4, r4, r9
 8000ac8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d061      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000ad2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6034      	str	r4, [r6, #0]
 8000ada:	6073      	str	r3, [r6, #4]
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xc8>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d054      	beq.n	8000b92 <__udivmoddi4+0x166>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	f040 808e 	bne.w	8000c1a <__udivmoddi4+0x1ee>
 8000afe:	42ab      	cmp	r3, r5
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xdc>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80fa 	bhi.w	8000cfc <__udivmoddi4+0x2d0>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	46ac      	mov	ip, r5
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d03f      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000b16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	b912      	cbnz	r2, 8000b26 <__udivmoddi4+0xfa>
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b26:	fab7 fe87 	clz	lr, r7
 8000b2a:	f1be 0f00 	cmp.w	lr, #0
 8000b2e:	d134      	bne.n	8000b9a <__udivmoddi4+0x16e>
 8000b30:	1beb      	subs	r3, r5, r7
 8000b32:	0c3a      	lsrs	r2, r7, #16
 8000b34:	fa1f fc87 	uxth.w	ip, r7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b3e:	0c25      	lsrs	r5, r4, #16
 8000b40:	fb02 3318 	mls	r3, r2, r8, r3
 8000b44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b48:	fb0c f308 	mul.w	r3, ip, r8
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x134>
 8000b50:	19ed      	adds	r5, r5, r7
 8000b52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x132>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	f200 80d1 	bhi.w	8000d00 <__udivmoddi4+0x2d4>
 8000b5e:	4680      	mov	r8, r0
 8000b60:	1aed      	subs	r5, r5, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b68:	fb02 5510 	mls	r5, r2, r0, r5
 8000b6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b70:	fb0c fc00 	mul.w	ip, ip, r0
 8000b74:	45a4      	cmp	ip, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x15c>
 8000b78:	19e4      	adds	r4, r4, r7
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x15a>
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 040c 	sub.w	r4, r4, ip
 8000b8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b90:	e79d      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b92:	4631      	mov	r1, r6
 8000b94:	4630      	mov	r0, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	f1ce 0420 	rsb	r4, lr, #32
 8000b9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ba2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ba6:	fa20 f804 	lsr.w	r8, r0, r4
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb0:	ea48 0803 	orr.w	r8, r8, r3
 8000bb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc0:	fa1f fc87 	uxth.w	ip, r7
 8000bc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bcc:	42ab      	cmp	r3, r5
 8000bce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x1bc>
 8000bd4:	19ed      	adds	r5, r5, r7
 8000bd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bda:	f080 808a 	bcs.w	8000cf2 <__udivmoddi4+0x2c6>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	f240 8087 	bls.w	8000cf2 <__udivmoddi4+0x2c6>
 8000be4:	3902      	subs	r1, #2
 8000be6:	443d      	add	r5, r7
 8000be8:	1aeb      	subs	r3, r5, r3
 8000bea:	fa1f f588 	uxth.w	r5, r8
 8000bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1e6>
 8000c02:	19ed      	adds	r5, r5, r7
 8000c04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c08:	d26f      	bcs.n	8000cea <__udivmoddi4+0x2be>
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d96d      	bls.n	8000cea <__udivmoddi4+0x2be>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	443d      	add	r5, r7
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	e78f      	b.n	8000b3a <__udivmoddi4+0x10e>
 8000c1a:	f1c1 0720 	rsb	r7, r1, #32
 8000c1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c22:	408b      	lsls	r3, r1
 8000c24:	fa05 f401 	lsl.w	r4, r5, r1
 8000c28:	ea48 0303 	orr.w	r3, r8, r3
 8000c2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c46:	fa1f f883 	uxth.w	r8, r3
 8000c4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c4e:	fb09 f408 	mul.w	r4, r9, r8
 8000c52:	42ac      	cmp	r4, r5
 8000c54:	fa02 f201 	lsl.w	r2, r2, r1
 8000c58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x244>
 8000c5e:	18ed      	adds	r5, r5, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	d243      	bcs.n	8000cee <__udivmoddi4+0x2c2>
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	d941      	bls.n	8000cee <__udivmoddi4+0x2c2>
 8000c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6e:	441d      	add	r5, r3
 8000c70:	1b2d      	subs	r5, r5, r4
 8000c72:	fa1f fe8e 	uxth.w	lr, lr
 8000c76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c82:	fb00 f808 	mul.w	r8, r0, r8
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x26e>
 8000c8a:	18e4      	adds	r4, r4, r3
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d229      	bcs.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	d927      	bls.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c96:	3802      	subs	r0, #2
 8000c98:	441c      	add	r4, r3
 8000c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9e:	eba4 0408 	sub.w	r4, r4, r8
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	454c      	cmp	r4, r9
 8000ca8:	46c6      	mov	lr, r8
 8000caa:	464d      	mov	r5, r9
 8000cac:	d315      	bcc.n	8000cda <__udivmoddi4+0x2ae>
 8000cae:	d012      	beq.n	8000cd6 <__udivmoddi4+0x2aa>
 8000cb0:	b156      	cbz	r6, 8000cc8 <__udivmoddi4+0x29c>
 8000cb2:	ebba 030e 	subs.w	r3, sl, lr
 8000cb6:	eb64 0405 	sbc.w	r4, r4, r5
 8000cba:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	6037      	str	r7, [r6, #0]
 8000cc6:	6074      	str	r4, [r6, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e6f8      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	e6e0      	b.n	8000a98 <__udivmoddi4+0x6c>
 8000cd6:	45c2      	cmp	sl, r8
 8000cd8:	d2ea      	bcs.n	8000cb0 <__udivmoddi4+0x284>
 8000cda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cde:	eb69 0503 	sbc.w	r5, r9, r3
 8000ce2:	3801      	subs	r0, #1
 8000ce4:	e7e4      	b.n	8000cb0 <__udivmoddi4+0x284>
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	e7d7      	b.n	8000c9a <__udivmoddi4+0x26e>
 8000cea:	4640      	mov	r0, r8
 8000cec:	e791      	b.n	8000c12 <__udivmoddi4+0x1e6>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e7be      	b.n	8000c70 <__udivmoddi4+0x244>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1bc>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x15c>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xe6>
 8000d00:	f1a8 0802 	sub.w	r8, r8, #2
 8000d04:	443d      	add	r5, r7
 8000d06:	e72b      	b.n	8000b60 <__udivmoddi4+0x134>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d12:	e003      	b.n	8000d1c <LoopCopyDataInit>

08000d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d1a:	3104      	adds	r1, #4

08000d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d24:	d3f6      	bcc.n	8000d14 <CopyDataInit>
  ldr  r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d28:	e002      	b.n	8000d30 <LoopFillZerobss>

08000d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d2c:	f842 3b04 	str.w	r3, [r2], #4

08000d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d34:	d3f9      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d36:	f000 faa5 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f001 fc3b 	bl	80025b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f000 f865 	bl	8000e0c <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d48:	08003454 	.word	0x08003454
  ldr  r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d50:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000d54:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000d58:	200000dc 	.word	0x200000dc

08000d5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <CAN1_RX0_IRQHandler>
	...

08000d60 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <SystemClock_Config+0xa4>)
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d6c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d70:	6411      	str	r1, [r2, #64]	; 0x40
 8000d72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d74:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d78:	9201      	str	r2, [sp, #4]
 8000d7a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <SystemClock_Config+0xa8>)
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d86:	6011      	str	r1, [r2, #0]
 8000d88:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8a:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d90:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d92:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d96:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d9e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000da0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da2:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da6:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000da8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000daa:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dac:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dae:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db0:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f000 fed1 	bl	8001b58 <HAL_RCC_OscConfig>
 8000db6:	b100      	cbz	r0, 8000dba <SystemClock_Config+0x5a>
 8000db8:	e7fe      	b.n	8000db8 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	230f      	movs	r3, #15
 8000dbc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dcc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dd2:	f001 f865 	bl	8001ea0 <HAL_RCC_ClockConfig>
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	b100      	cbz	r0, 8000ddc <SystemClock_Config+0x7c>
 8000dda:	e7fe      	b.n	8000dda <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ddc:	f001 f8fa 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8000de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000de8:	f000 fd3c 	bl	8001864 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dec:	4628      	mov	r0, r5
 8000dee:	f000 fd4f 	bl	8001890 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000df2:	4622      	mov	r2, r4
 8000df4:	4621      	mov	r1, r4
 8000df6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfa:	f000 fcf3 	bl	80017e4 <HAL_NVIC_SetPriority>
}
 8000dfe:	b015      	add	sp, #84	; 0x54
 8000e00:	bd30      	pop	{r4, r5, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <main>:
{
 8000e0c:	b500      	push	{lr}
 8000e0e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000e10:	f000 fa72 	bl	80012f8 <HAL_Init>
  SystemClock_Config();
 8000e14:	f7ff ffa4 	bl	8000d60 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	4a4a      	ldr	r2, [pc, #296]	; (8000f44 <main+0x138>)
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
  htim1.Instance = TIM1;
 8000e20:	4c49      	ldr	r4, [pc, #292]	; (8000f48 <main+0x13c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	f041 0101 	orr.w	r1, r1, #1
 8000e26:	6311      	str	r1, [r2, #48]	; 0x30
 8000e28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e2a:	f001 0101 	and.w	r1, r1, #1
 8000e2e:	9100      	str	r1, [sp, #0]
 8000e30:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e36:	f041 0110 	orr.w	r1, r1, #16
 8000e3a:	6311      	str	r1, [r2, #48]	; 0x30
 8000e3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	60a3      	str	r3, [r4, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e40:	f002 0210 	and.w	r2, r2, #16
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	9a01      	ldr	r2, [sp, #4]
  htim1.Instance = TIM1;
 8000e48:	4a40      	ldr	r2, [pc, #256]	; (8000f4c <main+0x140>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	6123      	str	r3, [r4, #16]
  htim1.Init.Prescaler = 0;
 8000e4c:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e50:	4620      	mov	r0, r4
  htim1.Init.Period = 2170;
 8000e52:	f640 027a 	movw	r2, #2170	; 0x87a
 8000e56:	60e2      	str	r2, [r4, #12]
  htim1.Init.RepetitionCounter = 0;
 8000e58:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e5a:	f001 fa51 	bl	8002300 <HAL_TIM_PWM_Init>
 8000e5e:	b100      	cbz	r0, 8000e62 <main+0x56>
 8000e60:	e7fe      	b.n	8000e60 <main+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e66:	a902      	add	r1, sp, #8
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f001 fb58 	bl	800251e <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	b100      	cbz	r0, 8000e74 <main+0x68>
 8000e72:	e7fe      	b.n	8000e72 <main+0x66>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	9006      	str	r0, [sp, #24]
  sConfigOC.Pulse = 84;
 8000e7a:	2354      	movs	r3, #84	; 0x54
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7c:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7e:	9008      	str	r0, [sp, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e80:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e82:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e84:	a904      	add	r1, sp, #16
 8000e86:	4620      	mov	r0, r4
  sConfigOC.Pulse = 84;
 8000e88:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	f001 fa83 	bl	8002394 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	b100      	cbz	r0, 8000e92 <main+0x86>
 8000e90:	e7fe      	b.n	8000e90 <main+0x84>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e92:	900b      	str	r0, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e94:	900c      	str	r0, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e96:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e98:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e9a:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea0:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ea4:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea8:	f001 fb5b 	bl	8002562 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eac:	4605      	mov	r5, r0
 8000eae:	b100      	cbz	r0, 8000eb2 <main+0xa6>
 8000eb0:	e7fe      	b.n	8000eb0 <main+0xa4>
  HAL_TIM_MspPostInit(&htim1);
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f000 f8f0 	bl	8001098 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000eb8:	4629      	mov	r1, r5
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f001 fad8 	bl	8002470 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	f001 fb1a 	bl	80024fc <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000ec8:	6822      	ldr	r2, [r4, #0]
  hadc1.Instance = ADC1;
 8000eca:	4c21      	ldr	r4, [pc, #132]	; (8000f50 <main+0x144>)
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000ecc:	68d3      	ldr	r3, [r2, #12]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	60a5      	str	r5, [r4, #8]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	60d3      	str	r3, [r2, #12]
  hadc1.Instance = ADC1;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <main+0x148>)
  hadc1.Init.ScanConvMode = DISABLE;
 8000ed8:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eda:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000edc:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <main+0x14c>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee4:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eec:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eee:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef0:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8000ef2:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef4:	f000 fa28 	bl	8001348 <HAL_ADC_Init>
 8000ef8:	b100      	cbz	r0, 8000efc <main+0xf0>
 8000efa:	e7fe      	b.n	8000efa <main+0xee>
  sConfig.Channel = ADC_CHANNEL_0;
 8000efc:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000efe:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	a90b      	add	r1, sp, #44	; 0x2c
 8000f02:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8000f04:	960c      	str	r6, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f06:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	f000 fbc2 	bl	8001690 <HAL_ADC_ConfigChannel>
 8000f0c:	b100      	cbz	r0, 8000f10 <main+0x104>
 8000f0e:	e7fe      	b.n	8000f0e <main+0x102>
  HAL_ADC_Start_IT(&hadc1);
 8000f10:	4620      	mov	r0, r4
  hdac.Instance = DAC;
 8000f12:	4c12      	ldr	r4, [pc, #72]	; (8000f5c <main+0x150>)
  HAL_ADC_Start_IT(&hadc1);
 8000f14:	f000 fabc 	bl	8001490 <HAL_ADC_Start_IT>
  hdac.Instance = DAC;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <main+0x154>)
 8000f1a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f000 fcc8 	bl	80018b2 <HAL_DAC_Init>
 8000f22:	4602      	mov	r2, r0
 8000f24:	b100      	cbz	r0, 8000f28 <main+0x11c>
 8000f26:	e7fe      	b.n	8000f26 <main+0x11a>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f28:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f2a:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f2c:	a90b      	add	r1, sp, #44	; 0x2c
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f000 fd00 	bl	8001934 <HAL_DAC_ConfigChannel>
 8000f34:	4601      	mov	r1, r0
 8000f36:	b100      	cbz	r0, 8000f3a <main+0x12e>
 8000f38:	e7fe      	b.n	8000f38 <main+0x12c>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f000 fccc 	bl	80018d8 <HAL_DAC_Start>
 8000f40:	e7fe      	b.n	8000f40 <main+0x134>
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	20000040 	.word	0x20000040
 8000f54:	40012000 	.word	0x40012000
 8000f58:	0f000001 	.word	0x0f000001
 8000f5c:	20000088 	.word	0x20000088
 8000f60:	40007400 	.word	0x40007400

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 fc2a 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4611      	mov	r1, r2
 8000f70:	f06f 000b 	mvn.w	r0, #11
 8000f74:	f000 fc36 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	f06f 000a 	mvn.w	r0, #10
 8000f80:	f000 fc30 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	4611      	mov	r1, r2
 8000f88:	f06f 0009 	mvn.w	r0, #9
 8000f8c:	f000 fc2a 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	4611      	mov	r1, r2
 8000f94:	f06f 0004 	mvn.w	r0, #4
 8000f98:	f000 fc24 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	f06f 0003 	mvn.w	r0, #3
 8000fa4:	f000 fc1e 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4611      	mov	r1, r2
 8000fac:	f06f 0001 	mvn.w	r0, #1
 8000fb0:	f000 fc18 	bl	80017e4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fc0:	f000 bc10 	b.w	80017e4 <HAL_NVIC_SetPriority>

08000fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8000fc6:	6802      	ldr	r2, [r0, #0]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_ADC_MspInit+0x4c>)
 8000fca:	429a      	cmp	r2, r3
{
 8000fcc:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8000fce:	d11d      	bne.n	800100c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000fd6:	9400      	str	r4, [sp, #0]
 8000fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f000 fcce 	bl	8001998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffc:	2012      	movs	r0, #18
 8000ffe:	4622      	mov	r2, r4
 8001000:	4621      	mov	r1, r4
 8001002:	f000 fbef 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001006:	2012      	movs	r0, #18
 8001008:	f000 fc20 	bl	800184c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100c:	b006      	add	sp, #24
 800100e:	bd10      	pop	{r4, pc}
 8001010:	40012000 	.word	0x40012000
 8001014:	40020000 	.word	0x40020000

08001018 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 800101a:	6802      	ldr	r2, [r0, #0]
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_DAC_MspInit+0x3c>)
 800101e:	429a      	cmp	r2, r3
 8001020:	d115      	bne.n	800104e <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001022:	2100      	movs	r1, #0
 8001024:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001028:	9100      	str	r1, [sp, #0]
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <HAL_DAC_MspInit+0x40>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800102e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	9103      	str	r1, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 8001038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001040:	2310      	movs	r3, #16
 8001042:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f000 fca5 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800104e:	b007      	add	sp, #28
 8001050:	f85d fb04 	ldr.w	pc, [sp], #4
 8001054:	40007400 	.word	0x40007400
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800105c:	b507      	push	{r0, r1, r2, lr}

  if(htim_pwm->Instance==TIM1)
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_PWM_MspInit+0x38>)
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d113      	bne.n	800108e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	2200      	movs	r2, #0
 8001068:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001070:	f041 0101 	orr.w	r1, r1, #1
 8001074:	6459      	str	r1, [r3, #68]	; 0x44
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	9301      	str	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800107e:	2019      	movs	r0, #25
 8001080:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001082:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001084:	f000 fbae 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001088:	2019      	movs	r0, #25
 800108a:	f000 fbdf 	bl	800184c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800108e:	b003      	add	sp, #12
 8001090:	f85d fb04 	ldr.w	pc, [sp], #4
 8001094:	40010000 	.word	0x40010000

08001098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001098:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800109a:	6802      	ldr	r2, [r0, #0]
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_TIM_MspPostInit+0x40>)
 800109e:	429a      	cmp	r2, r3
{
 80010a0:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80010a2:	d117      	bne.n	80010d4 <HAL_TIM_MspPostInit+0x3c>
    PA7     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010a6:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010aa:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010b8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f000 fc6d 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010be:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010ce:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d0:	f000 fc62 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010d4:	b006      	add	sp, #24
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40021000 	.word	0x40021000

080010e4 <NMI_Handler>:
 80010e4:	4770      	bx	lr

080010e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler>

080010e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler>

080010ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler>

080010ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler>

080010ee <SVC_Handler>:
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 f919 	bl	800132c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80010fe:	f000 bbd4 	b.w	80018aa <HAL_SYSTICK_IRQHandler>
	...

08001104 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001104:	4801      	ldr	r0, [pc, #4]	; (800110c <ADC_IRQHandler+0x8>)
 8001106:	f000 ba2e 	b.w	8001566 <HAL_ADC_IRQHandler>
 800110a:	bf00      	nop
 800110c:	20000040 	.word	0x20000040

08001110 <HAL_ADC_ConvCpltCallback>:
}

uint32_t adcValue = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001110:	b508      	push	{r3, lr}
  /* Prevent unused argument(s) compilation warning */
	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
	adcValue = HAL_ADC_GetValue(hadc);
 8001112:	f000 fa23 	bl	800155c <HAL_ADC_GetValue>
 8001116:	4b01      	ldr	r3, [pc, #4]	; (800111c <HAL_ADC_ConvCpltCallback+0xc>)
 8001118:	6018      	str	r0, [r3, #0]
 800111a:	bd08      	pop	{r3, pc}
 800111c:	20000024 	.word	0x20000024

08001120 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001120:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	TIM1->CCR1 = (uint32_t)((2170 + (float)2170 * interm) / 2);
 8001122:	4d4b      	ldr	r5, [pc, #300]	; (8001250 <TIM1_UP_TIM10_IRQHandler+0x130>)
 8001124:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8001254 <TIM1_UP_TIM10_IRQHandler+0x134>
 8001128:	ed95 7a00 	vldr	s14, [r5]
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <TIM1_UP_TIM10_IRQHandler+0x138>)

	aux++;
	if (aux > 21700)
		aux = 0;

	ref = 1 * sinf(0.05*0.17372862*(float)aux);
 800112e:	4c4b      	ldr	r4, [pc, #300]	; (800125c <TIM1_UP_TIM10_IRQHandler+0x13c>)
	TIM1->CCR1 = (uint32_t)((2170 + (float)2170 * interm) / 2);
 8001130:	eee7 7a27 	vfma.f32	s15, s14, s15
 8001134:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 800113c:	ed2d 8b02 	vpush	{d8}
	TIM1->CCR1 = (uint32_t)((2170 + (float)2170 * interm) / 2);
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  	corrente = -0.0021*(float)adcValue + 6.0897;
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <TIM1_UP_TIM10_IRQHandler+0x140>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	ee07 0a90 	vmov	s15, r0
 8001150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff f99a 	bl	8000490 <__aeabi_f2d>
 800115c:	a336      	add	r3, pc, #216	; (adr r3, 8001238 <TIM1_UP_TIM10_IRQHandler+0x118>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff f9e9 	bl	8000538 <__aeabi_dmul>
 8001166:	a336      	add	r3, pc, #216	; (adr r3, 8001240 <TIM1_UP_TIM10_IRQHandler+0x120>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff f832 	bl	80001d4 <__adddf3>
 8001170:	f7ff fbf4 	bl	800095c <__aeabi_d2f>
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <TIM1_UP_TIM10_IRQHandler+0x144>)
 8001176:	6018      	str	r0, [r3, #0]
	aux++;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <TIM1_UP_TIM10_IRQHandler+0x148>)
 800117a:	681a      	ldr	r2, [r3, #0]
	if (aux > 21700)
 800117c:	f245 41c4 	movw	r1, #21700	; 0x54c4
	aux++;
 8001180:	3201      	adds	r2, #1
	if (aux > 21700)
 8001182:	428a      	cmp	r2, r1
		aux = 0;
 8001184:	bfc8      	it	gt
 8001186:	2200      	movgt	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
  	corrente = -0.0021*(float)adcValue + 6.0897;
 800118a:	ee08 0a10 	vmov	s16, r0
	ref = 1 * sinf(0.05*0.17372862*(float)aux);
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	ee07 0a90 	vmov	s15, r0
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	ee17 0a90 	vmov	r0, s15
 800119c:	f7ff f978 	bl	8000490 <__aeabi_f2d>
 80011a0:	a329      	add	r3, pc, #164	; (adr r3, 8001248 <TIM1_UP_TIM10_IRQHandler+0x128>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff f9c7 	bl	8000538 <__aeabi_dmul>
 80011aa:	f7ff fbd7 	bl	800095c <__aeabi_d2f>
 80011ae:	ee00 0a10 	vmov	s0, r0
 80011b2:	f001 fa23 	bl	80025fc <sinf>
 80011b6:	ed84 0a00 	vstr	s0, [r4]

	tensao = 20 * (ref - corrente);
 80011ba:	ee30 0a48 	vsub.f32	s0, s0, s16
 80011be:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80011c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80011c6:	4a29      	ldr	r2, [pc, #164]	; (800126c <TIM1_UP_TIM10_IRQHandler+0x14c>)
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <TIM1_UP_TIM10_IRQHandler+0x150>)
 80011ca:	ed82 0a00 	vstr	s0, [r2]

	amp = tensao / tensaoMax;
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <TIM1_UP_TIM10_IRQHandler+0x154>)
	//interm = sinf(1*2*3.14159*(float)aux/168);



  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d0:	4829      	ldr	r0, [pc, #164]	; (8001278 <TIM1_UP_TIM10_IRQHandler+0x158>)
	amp = tensao / tensaoMax;
 80011d2:	edd2 7a00 	vldr	s15, [r2]
 80011d6:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80011da:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80011de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	bfc8      	it	gt
 80011e8:	eeb0 7a48 	vmovgt.f32	s14, s16
	if (amp < -1)
 80011ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80011f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	amp = tensao / tensaoMax;
 80011f8:	ed83 7a00 	vstr	s14, [r3]
		amp = -1;
 80011fc:	bf48      	it	mi
 80011fe:	edc3 7a00 	vstrmi	s15, [r3]
	interm = amp;
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	602b      	str	r3, [r5, #0]
  HAL_TIM_IRQHandler(&htim1);
 8001206:	f000 ff74 	bl	80020f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) ((ref+1)*2048));
 800120a:	edd4 7a00 	vldr	s15, [r4]
 800120e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800127c <TIM1_UP_TIM10_IRQHandler+0x15c>
 8001212:	481b      	ldr	r0, [pc, #108]	; (8001280 <TIM1_UP_TIM10_IRQHandler+0x160>)
 8001214:	ee77 7a88 	vadd.f32	s15, s15, s16
}
 8001218:	ecbd 8b02 	vpop	{d8}
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) ((ref+1)*2048));
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	2200      	movs	r2, #0
 8001222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001226:	4611      	mov	r1, r2
 8001228:	ee17 3a90 	vmov	r3, s15
}
 800122c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) ((ref+1)*2048));
 8001230:	f000 bba0 	b.w	8001974 <HAL_DAC_SetValue>
 8001234:	f3af 8000 	nop.w
 8001238:	ea4a8c15 	.word	0xea4a8c15
 800123c:	bf613404 	.word	0xbf613404
 8001240:	5119ce07 	.word	0x5119ce07
 8001244:	40185bda 	.word	0x40185bda
 8001248:	0882fdc3 	.word	0x0882fdc3
 800124c:	3f81ca31 	.word	0x3f81ca31
 8001250:	20000034 	.word	0x20000034
 8001254:	4507a000 	.word	0x4507a000
 8001258:	40010000 	.word	0x40010000
 800125c:	20000038 	.word	0x20000038
 8001260:	20000024 	.word	0x20000024
 8001264:	20000030 	.word	0x20000030
 8001268:	2000002c 	.word	0x2000002c
 800126c:	2000003c 	.word	0x2000003c
 8001270:	20000028 	.word	0x20000028
 8001274:	20000000 	.word	0x20000000
 8001278:	2000009c 	.word	0x2000009c
 800127c:	45000000 	.word	0x45000000
 8001280:	20000088 	.word	0x20000088

08001284 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	490f      	ldr	r1, [pc, #60]	; (80012c4 <SystemInit+0x40>)
 8001286:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800128a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <SystemInit+0x44>)
 8001294:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001296:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800129e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <SystemInit+0x48>)
 80012ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012b6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012be:	608b      	str	r3, [r1, #8]
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	40023800 	.word	0x40023800
 80012cc:	24003010 	.word	0x24003010

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_InitTick+0x24>)
{
 80012d4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80012e0:	f000 fac0 	bl	8001864 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	4621      	mov	r1, r4
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 fa7a 	bl	80017e4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80012f0:	2000      	movs	r0, #0
 80012f2:	bd10      	pop	{r4, pc}
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_Init>:
{
 80012f8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x30>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001302:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800130a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001312:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 fa53 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff ffd8 	bl	80012d0 <HAL_InitTick>
  HAL_MspInit();
 8001320:	f7ff fe20 	bl	8000f64 <HAL_MspInit>
}
 8001324:	2000      	movs	r0, #0
 8001326:	bd08      	pop	{r3, pc}
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800132c:	4a02      	ldr	r2, [pc, #8]	; (8001338 <HAL_IncTick+0xc>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200000d8 	.word	0x200000d8

0800133c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <HAL_GetTick+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200000d8 	.word	0x200000d8

08001348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001348:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800134a:	4604      	mov	r4, r0
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 8099 	beq.w	8001484 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001352:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001354:	b923      	cbnz	r3, 8001360 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001356:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135c:	f7ff fe32 	bl	8000fc4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001362:	06db      	lsls	r3, r3, #27
 8001364:	f100 808c 	bmi.w	8001480 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800136a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800136e:	f023 0302 	bic.w	r3, r3, #2
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_ADC_Init+0x140>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001380:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	6861      	ldr	r1, [r4, #4]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800138c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800139c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800139e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013a0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013a2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013a6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013be:	4933      	ldr	r1, [pc, #204]	; (800148c <HAL_ADC_Init+0x144>)
 80013c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d050      	beq.n	8001468 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c6:	6899      	ldr	r1, [r3, #8]
 80013c8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80013cc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013ce:	6899      	ldr	r1, [r3, #8]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013d4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013e4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80013e6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013e8:	f022 0202 	bic.w	r2, r2, #2
 80013ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80013f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013f6:	6a22      	ldr	r2, [r4, #32]
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d03d      	beq.n	8001478 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013fc:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001404:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800140c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	3901      	subs	r1, #1
 8001412:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001416:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800141a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800141c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001424:	3901      	subs	r1, #1
 8001426:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800142e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800143c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800143e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001440:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001448:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800144a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800144c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001450:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001452:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001460:	2300      	movs	r3, #0
 8001462:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001466:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800146e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001476:	e7b4      	b.n	80013e2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147e:	e7ca      	b.n	8001416 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001480:	2001      	movs	r0, #1
 8001482:	e7ed      	b.n	8001460 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
}
 8001486:	bd10      	pop	{r4, pc}
 8001488:	40012300 	.word	0x40012300
 800148c:	0f000001 	.word	0x0f000001

08001490 <HAL_ADC_Start_IT>:
{
 8001490:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001496:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d054      	beq.n	8001548 <HAL_ADC_Start_IT+0xb8>
 800149e:	2301      	movs	r3, #1
 80014a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	07d1      	lsls	r1, r2, #31
 80014aa:	d505      	bpl.n	80014b8 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	07d2      	lsls	r2, r2, #31
 80014b0:	d414      	bmi.n	80014dc <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
}
 80014b4:	b002      	add	sp, #8
 80014b6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80014b8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ba:	4924      	ldr	r1, [pc, #144]	; (800154c <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_ADC_Start_IT+0xc0>)
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80014ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80014ce:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80014d0:	9a01      	ldr	r2, [sp, #4]
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d0ea      	beq.n	80014ac <HAL_ADC_Start_IT+0x1c>
      counter--;
 80014d6:	9a01      	ldr	r2, [sp, #4]
 80014d8:	3a01      	subs	r2, #1
 80014da:	e7f8      	b.n	80014ce <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80014dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80014de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ea:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f0:	bf41      	itttt	mi
 80014f2:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80014f4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80014f8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80014fc:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001504:	bf1c      	itt	ne
 8001506:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001508:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800150c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800150e:	2200      	movs	r2, #0
 8001510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001514:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001518:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001520:	f042 0220 	orr.w	r2, r2, #32
 8001524:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_ADC_Start_IT+0xc4>)
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	06d2      	lsls	r2, r2, #27
 800152c:	d108      	bne.n	8001540 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001534:	d1bd      	bne.n	80014b2 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e7b9      	b.n	80014b4 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_ADC_Start_IT+0xc8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d1b5      	bne.n	80014b2 <HAL_ADC_Start_IT+0x22>
 8001546:	e7f2      	b.n	800152e <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 8001548:	2002      	movs	r0, #2
 800154a:	e7b3      	b.n	80014b4 <HAL_ADC_Start_IT+0x24>
 800154c:	000f4240 	.word	0x000f4240
 8001550:	20000004 	.word	0x20000004
 8001554:	40012300 	.word	0x40012300
 8001558:	40012000 	.word	0x40012000

0800155c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001560:	4770      	bx	lr

08001562 <HAL_ADC_LevelOutOfWindowCallback>:
 8001562:	4770      	bx	lr

08001564 <HAL_ADC_ErrorCallback>:
{
 8001564:	4770      	bx	lr

08001566 <HAL_ADC_IRQHandler>:
{
 8001566:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800156c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800156e:	078d      	lsls	r5, r1, #30
{
 8001570:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8001572:	d52b      	bpl.n	80015cc <HAL_ADC_IRQHandler+0x66>
 8001574:	0690      	lsls	r0, r2, #26
 8001576:	d529      	bpl.n	80015cc <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001578:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800157a:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800157c:	bf5e      	ittt	pl
 800157e:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001580:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001584:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800158c:	d117      	bne.n	80015be <HAL_ADC_IRQHandler+0x58>
 800158e:	69a2      	ldr	r2, [r4, #24]
 8001590:	b9aa      	cbnz	r2, 80015be <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001594:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001598:	d002      	beq.n	80015a0 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800159a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800159c:	0552      	lsls	r2, r2, #21
 800159e:	d40e      	bmi.n	80015be <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	f022 0220 	bic.w	r2, r2, #32
 80015a6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ae:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b2:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b4:	bf5e      	ittt	pl
 80015b6:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80015b8:	f043 0301 	orrpl.w	r3, r3, #1
 80015bc:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fda6 	bl	8001110 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	f06f 0212 	mvn.w	r2, #18
 80015ca:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80015d0:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80015d2:	074d      	lsls	r5, r1, #29
 80015d4:	d532      	bpl.n	800163c <HAL_ADC_IRQHandler+0xd6>
 80015d6:	0610      	lsls	r0, r2, #24
 80015d8:	d530      	bpl.n	800163c <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015dc:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015de:	bf5e      	ittt	pl
 80015e0:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80015e2:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80015e6:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80015ee:	d11e      	bne.n	800162e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015f2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80015f6:	d002      	beq.n	80015fe <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015f8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015fa:	0552      	lsls	r2, r2, #21
 80015fc:	d417      	bmi.n	800162e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015fe:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001600:	0555      	lsls	r5, r2, #21
 8001602:	d414      	bmi.n	800162e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001604:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001606:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800160a:	d110      	bne.n	800162e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800160c:	69a2      	ldr	r2, [r4, #24]
 800160e:	b972      	cbnz	r2, 800162e <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001616:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800161a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800161e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001622:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001624:	bf5e      	ittt	pl
 8001626:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001628:	f043 0301 	orrpl.w	r3, r3, #1
 800162c:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800162e:	4620      	mov	r0, r4
 8001630:	f000 f8c4 	bl	80017bc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f06f 020c 	mvn.w	r2, #12
 800163a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001640:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001642:	07c9      	lsls	r1, r1, #31
 8001644:	d50f      	bpl.n	8001666 <HAL_ADC_IRQHandler+0x100>
 8001646:	0655      	lsls	r5, r2, #25
 8001648:	d50d      	bpl.n	8001666 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	07d8      	lsls	r0, r3, #31
 800164e:	d50a      	bpl.n	8001666 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff ff82 	bl	8001562 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f06f 0201 	mvn.w	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800166a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800166c:	0689      	lsls	r1, r1, #26
 800166e:	d50d      	bpl.n	800168c <HAL_ADC_IRQHandler+0x126>
 8001670:	0152      	lsls	r2, r2, #5
 8001672:	d50b      	bpl.n	800168c <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001674:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001676:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8001680:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001682:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001684:	f7ff ff6e 	bl	8001564 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	601d      	str	r5, [r3, #0]
 800168c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001690 <HAL_ADC_ConfigChannel>:
{
 8001690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001696:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800169a:	2b01      	cmp	r3, #1
 800169c:	f000 8083 	beq.w	80017a6 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a0:	680d      	ldr	r5, [r1, #0]
 80016a2:	6804      	ldr	r4, [r0, #0]
 80016a4:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80016a6:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80016aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80016ae:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016b0:	d92a      	bls.n	8001708 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016b2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80016b6:	68e7      	ldr	r7, [r4, #12]
 80016b8:	3b1e      	subs	r3, #30
 80016ba:	f04f 0e07 	mov.w	lr, #7
 80016be:	fa0e fe03 	lsl.w	lr, lr, r3
 80016c2:	ea27 070e 	bic.w	r7, r7, lr
 80016c6:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	68e7      	ldr	r7, [r4, #12]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	433b      	orrs	r3, r7
 80016d0:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80016d2:	684a      	ldr	r2, [r1, #4]
 80016d4:	2a06      	cmp	r2, #6
 80016d6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80016da:	d825      	bhi.n	8001728 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016dc:	4413      	add	r3, r2
 80016de:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80016e0:	1f59      	subs	r1, r3, #5
 80016e2:	231f      	movs	r3, #31
 80016e4:	408b      	lsls	r3, r1
 80016e6:	ea27 0303 	bic.w	r3, r7, r3
 80016ea:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80016ee:	fa06 f101 	lsl.w	r1, r6, r1
 80016f2:	4311      	orrs	r1, r2
 80016f4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_ADC_ConfigChannel+0x11c>)
 80016f8:	429c      	cmp	r4, r3
 80016fa:	d034      	beq.n	8001766 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80016fc:	2300      	movs	r3, #0
 80016fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001702:	4618      	mov	r0, r3
}
 8001704:	b003      	add	sp, #12
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001708:	6927      	ldr	r7, [r4, #16]
 800170a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800170e:	f04f 0e07 	mov.w	lr, #7
 8001712:	fa0e fe03 	lsl.w	lr, lr, r3
 8001716:	ea27 070e 	bic.w	r7, r7, lr
 800171a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800171c:	6927      	ldr	r7, [r4, #16]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	433b      	orrs	r3, r7
 8001724:	6123      	str	r3, [r4, #16]
 8001726:	e7d4      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001728:	2a0c      	cmp	r2, #12
 800172a:	d80e      	bhi.n	800174a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800172c:	4413      	add	r3, r2
 800172e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001730:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001734:	231f      	movs	r3, #31
 8001736:	4093      	lsls	r3, r2
 8001738:	ea21 0303 	bic.w	r3, r1, r3
 800173c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800173e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001740:	fa06 f202 	lsl.w	r2, r6, r2
 8001744:	431a      	orrs	r2, r3
 8001746:	6322      	str	r2, [r4, #48]	; 0x30
 8001748:	e7d5      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174a:	4413      	add	r3, r2
 800174c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800174e:	3b41      	subs	r3, #65	; 0x41
 8001750:	221f      	movs	r2, #31
 8001752:	409a      	lsls	r2, r3
 8001754:	ea21 0202 	bic.w	r2, r1, r2
 8001758:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800175a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800175c:	fa06 f103 	lsl.w	r1, r6, r3
 8001760:	4311      	orrs	r1, r2
 8001762:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001764:	e7c7      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001766:	2d12      	cmp	r5, #18
 8001768:	d104      	bne.n	8001774 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_ADC_ConfigChannel+0x120>)
 800176c:	6853      	ldr	r3, [r2, #4]
 800176e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001772:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001774:	f1a5 0310 	sub.w	r3, r5, #16
 8001778:	2b01      	cmp	r3, #1
 800177a:	d8bf      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_ADC_ConfigChannel+0x120>)
 800177e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001780:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001786:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001788:	d1b8      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_ADC_ConfigChannel+0x124>)
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_ADC_ConfigChannel+0x128>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fbb3 f2f2 	udiv	r2, r3, r2
 8001794:	230a      	movs	r3, #10
 8001796:	4353      	muls	r3, r2
        counter--;
 8001798:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ad      	beq.n	80016fc <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	e7f8      	b.n	8001798 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80017a6:	2002      	movs	r0, #2
 80017a8:	e7ac      	b.n	8001704 <HAL_ADC_ConfigChannel+0x74>
 80017aa:	bf00      	nop
 80017ac:	40012000 	.word	0x40012000
 80017b0:	40012300 	.word	0x40012300
 80017b4:	20000004 	.word	0x20000004
 80017b8:	000f4240 	.word	0x000f4240

080017bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017d0:	0200      	lsls	r0, r0, #8
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80017da:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017dc:	60d3      	str	r3, [r2, #12]
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b530      	push	{r4, r5, lr}
 80017e8:	68dc      	ldr	r4, [r3, #12]
 80017ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	bf28      	it	cs
 80017f8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 0501 	mov.w	r5, #1
 8001800:	fa05 f303 	lsl.w	r3, r5, r3
 8001804:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001808:	bf8c      	ite	hi
 800180a:	3c03      	subhi	r4, #3
 800180c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180e:	4019      	ands	r1, r3
 8001810:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001812:	fa05 f404 	lsl.w	r4, r5, r4
 8001816:	3c01      	subs	r4, #1
 8001818:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800181a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	ea42 0201 	orr.w	r2, r2, r1
 8001820:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	bfaf      	iteee	ge
 8001826:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	f000 000f 	andlt.w	r0, r0, #15
 800182e:	4b06      	ldrlt	r3, [pc, #24]	; (8001848 <HAL_NVIC_SetPriority+0x64>)
 8001830:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	bfa5      	ittet	ge
 8001834:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001838:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001840:	bd30      	pop	{r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	e000ed14 	.word	0xe000ed14

0800184c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800184c:	0942      	lsrs	r2, r0, #5
 800184e:	2301      	movs	r3, #1
 8001850:	f000 001f 	and.w	r0, r0, #31
 8001854:	fa03 f000 	lsl.w	r0, r3, r0
 8001858:	4b01      	ldr	r3, [pc, #4]	; (8001860 <HAL_NVIC_EnableIRQ+0x14>)
 800185a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	3801      	subs	r0, #1
 8001866:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800186a:	d20a      	bcs.n	8001882 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001870:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	21f0      	movs	r1, #240	; 0xf0
 8001874:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001892:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001894:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001896:	bf0c      	ite	eq
 8001898:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800189c:	f022 0204 	bicne.w	r2, r2, #4
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4770      	bx	lr
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80018a8:	4770      	bx	lr

080018aa <HAL_SYSTICK_IRQHandler>:
{
 80018aa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80018ac:	f7ff fffc 	bl	80018a8 <HAL_SYSTICK_Callback>
 80018b0:	bd08      	pop	{r3, pc}

080018b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80018b2:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80018b4:	4604      	mov	r4, r0
 80018b6:	b168      	cbz	r0, 80018d4 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80018b8:	7903      	ldrb	r3, [r0, #4]
 80018ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018be:	b913      	cbnz	r3, 80018c6 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018c0:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018c2:	f7ff fba9 	bl	8001018 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018ca:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018cc:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018ce:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80018d0:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80018d2:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80018d8:	7943      	ldrb	r3, [r0, #5]
 80018da:	2b01      	cmp	r3, #1
{
 80018dc:	b510      	push	{r4, lr}
 80018de:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80018e2:	d018      	beq.n	8001916 <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018e4:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018e6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80018e8:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ea:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 80018ec:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ee:	408a      	lsls	r2, r1
 80018f0:	4322      	orrs	r2, r4
 80018f2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80018f4:	b989      	cbnz	r1, 800191a <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80018f6:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80018f8:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80018fa:	074c      	lsls	r4, r1, #29
 80018fc:	d507      	bpl.n	800190e <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80018fe:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001902:	2a38      	cmp	r2, #56	; 0x38
 8001904:	d103      	bne.n	800190e <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800190c:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800190e:	2301      	movs	r3, #1
 8001910:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001912:	2300      	movs	r3, #0
 8001914:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001916:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8001918:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800191a:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800191c:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800191e:	0349      	lsls	r1, r1, #13
 8001920:	d5f5      	bpl.n	800190e <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001922:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001926:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 800192a:	d1f0      	bne.n	800190e <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	f042 0202 	orr.w	r2, r2, #2
 8001932:	e7eb      	b.n	800190c <HAL_DAC_Start+0x34>

08001934 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001934:	7943      	ldrb	r3, [r0, #5]
 8001936:	2b01      	cmp	r3, #1
{
 8001938:	b530      	push	{r4, r5, lr}
 800193a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800193e:	d017      	beq.n	8001970 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001940:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001942:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001944:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001946:	f640 75fe 	movw	r5, #4094	; 0xffe
 800194a:	4095      	lsls	r5, r2
 800194c:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001950:	c90a      	ldmia	r1, {r1, r3}
 8001952:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001954:	4093      	lsls	r3, r2
 8001956:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001958:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	21c0      	movs	r1, #192	; 0xc0
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001966:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001968:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800196a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800196c:	2300      	movs	r3, #0
 800196e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001970:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8001972:	bd30      	pop	{r4, r5, pc}

08001974 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001974:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8001976:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001978:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 800197a:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 800197c:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 800197e:	b941      	cbnz	r1, 8001992 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001980:	9901      	ldr	r1, [sp, #4]
 8001982:	3108      	adds	r1, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001984:	440a      	add	r2, r1
 8001986:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001988:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800198a:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	b002      	add	sp, #8
 8001990:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001992:	9901      	ldr	r1, [sp, #4]
 8001994:	3114      	adds	r1, #20
 8001996:	e7f5      	b.n	8001984 <HAL_DAC_SetValue+0x10>

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b50 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4a68      	ldr	r2, [pc, #416]	; (8001b48 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001b54 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80019ae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80019b4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80019bc:	45b6      	cmp	lr, r6
 80019be:	f040 80ae 	bne.w	8001b1e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	684c      	ldr	r4, [r1, #4]
 80019c4:	f024 0710 	bic.w	r7, r4, #16
 80019c8:	2f02      	cmp	r7, #2
 80019ca:	d116      	bne.n	80019fa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80019d0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80019e0:	f04f 0c0f 	mov.w	ip, #15
 80019e4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80019e8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ec:	690d      	ldr	r5, [r1, #16]
 80019ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80019f2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80019f6:	f8ca 5020 	str.w	r5, [sl, #32]
 80019fa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001a00:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a04:	fa05 f50a 	lsl.w	r5, r5, sl
 8001a08:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a12:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a16:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a1c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001a1e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a22:	d811      	bhi.n	8001a48 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001a24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a26:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	68cf      	ldr	r7, [r1, #12]
 8001a2c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001a30:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001a34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a3c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001a40:	409f      	lsls	r7, r3
 8001a42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a46:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a48:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	688f      	ldr	r7, [r1, #8]
 8001a4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a52:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001a54:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a56:	00e5      	lsls	r5, r4, #3
 8001a58:	d561      	bpl.n	8001b1e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	f04f 0b00 	mov.w	fp, #0
 8001a5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001a62:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a66:	4d39      	ldr	r5, [pc, #228]	; (8001b4c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a6c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001a70:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001a74:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a78:	9703      	str	r7, [sp, #12]
 8001a7a:	9f03      	ldr	r7, [sp, #12]
 8001a7c:	f023 0703 	bic.w	r7, r3, #3
 8001a80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a84:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a94:	f04f 0e0f 	mov.w	lr, #15
 8001a98:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	d043      	beq.n	8001b2c <HAL_GPIO_Init+0x194>
 8001aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	d041      	beq.n	8001b30 <HAL_GPIO_Init+0x198>
 8001aac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab0:	42a8      	cmp	r0, r5
 8001ab2:	d03f      	beq.n	8001b34 <HAL_GPIO_Init+0x19c>
 8001ab4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ab8:	42a8      	cmp	r0, r5
 8001aba:	d03d      	beq.n	8001b38 <HAL_GPIO_Init+0x1a0>
 8001abc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac0:	42a8      	cmp	r0, r5
 8001ac2:	d03b      	beq.n	8001b3c <HAL_GPIO_Init+0x1a4>
 8001ac4:	4548      	cmp	r0, r9
 8001ac6:	d03b      	beq.n	8001b40 <HAL_GPIO_Init+0x1a8>
 8001ac8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001acc:	42a8      	cmp	r0, r5
 8001ace:	d039      	beq.n	8001b44 <HAL_GPIO_Init+0x1ac>
 8001ad0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ad4:	42a8      	cmp	r0, r5
 8001ad6:	bf14      	ite	ne
 8001ad8:	2508      	movne	r5, #8
 8001ada:	2507      	moveq	r5, #7
 8001adc:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ae0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001ae6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001aee:	bf0c      	ite	eq
 8001af0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001af2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001af4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001af6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001afc:	bf0c      	ite	eq
 8001afe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b00:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001b02:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b04:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b06:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	bf0c      	ite	eq
 8001b0c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001b0e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001b10:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001b12:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b16:	bf54      	ite	pl
 8001b18:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001b1a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001b1c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2b10      	cmp	r3, #16
 8001b22:	f47f af44 	bne.w	80019ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001b26:	b005      	add	sp, #20
 8001b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2c:	465d      	mov	r5, fp
 8001b2e:	e7d5      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b30:	2501      	movs	r5, #1
 8001b32:	e7d3      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b34:	2502      	movs	r5, #2
 8001b36:	e7d1      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b38:	2503      	movs	r5, #3
 8001b3a:	e7cf      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b3c:	2504      	movs	r5, #4
 8001b3e:	e7cd      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b40:	2505      	movs	r5, #5
 8001b42:	e7cb      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b44:	2506      	movs	r5, #6
 8001b46:	e7c9      	b.n	8001adc <HAL_GPIO_Init+0x144>
 8001b48:	40013c00 	.word	0x40013c00
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40021400 	.word	0x40021400

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	b910      	cbnz	r0, 8001b64 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001b5e:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b60:	b003      	add	sp, #12
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b64:	6803      	ldr	r3, [r0, #0]
 8001b66:	07d8      	lsls	r0, r3, #31
 8001b68:	d43b      	bmi.n	8001be2 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	0799      	lsls	r1, r3, #30
 8001b6e:	f100 8084 	bmi.w	8001c7a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	071e      	lsls	r6, r3, #28
 8001b76:	f100 80c6 	bmi.w	8001d06 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	075d      	lsls	r5, r3, #29
 8001b7e:	d52a      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	4baa      	ldr	r3, [pc, #680]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8001b86:	4dab      	ldr	r5, [pc, #684]	; (8001e34 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001ba2:	f7ff fbcb 	bl	800133c <HAL_GetTick>
 8001ba6:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	05da      	lsls	r2, r3, #23
 8001bac:	f140 80cd 	bpl.w	8001d4a <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	68a3      	ldr	r3, [r4, #8]
 8001bb2:	4d9f      	ldr	r5, [pc, #636]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 80cf 	bne.w	8001d58 <HAL_RCC_OscConfig+0x200>
 8001bba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fbbb 	bl	800133c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4d9a      	ldr	r5, [pc, #616]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001bc8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bd0:	079b      	lsls	r3, r3, #30
 8001bd2:	f140 80e2 	bpl.w	8001d9a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	69a2      	ldr	r2, [r4, #24]
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	f040 80e5 	bne.w	8001da8 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7be      	b.n	8001b60 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	4b93      	ldr	r3, [pc, #588]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	f002 020c 	and.w	r2, r2, #12
 8001bea:	2a04      	cmp	r2, #4
 8001bec:	d007      	beq.n	8001bfe <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf4:	2a08      	cmp	r2, #8
 8001bf6:	d10a      	bne.n	8001c0e <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	025a      	lsls	r2, r3, #9
 8001bfc:	d507      	bpl.n	8001c0e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	039b      	lsls	r3, r3, #14
 8001c04:	d5b1      	bpl.n	8001b6a <HAL_RCC_OscConfig+0x12>
 8001c06:	6863      	ldr	r3, [r4, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ae      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
 8001c0c:	e7a7      	b.n	8001b5e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	4d87      	ldr	r5, [pc, #540]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d111      	bne.n	8001c3c <HAL_RCC_OscConfig+0xe4>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb8c 	bl	800133c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	4d82      	ldr	r5, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001c26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	039f      	lsls	r7, r3, #14
 8001c2c:	d49d      	bmi.n	8001b6a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fb85 	bl	800133c <HAL_GetTick>
 8001c32:	1b80      	subs	r0, r0, r6
 8001c34:	2864      	cmp	r0, #100	; 0x64
 8001c36:	d9f7      	bls.n	8001c28 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e791      	b.n	8001b60 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c40:	d104      	bne.n	8001c4c <HAL_RCC_OscConfig+0xf4>
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	602b      	str	r3, [r5, #0]
 8001c4a:	e7e5      	b.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c4c:	682a      	ldr	r2, [r5, #0]
 8001c4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c52:	602a      	str	r2, [r5, #0]
 8001c54:	682a      	ldr	r2, [r5, #0]
 8001c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c5a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1df      	bne.n	8001c20 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb6c 	bl	800133c <HAL_GetTick>
 8001c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	0398      	lsls	r0, r3, #14
 8001c6a:	f57f af7e 	bpl.w	8001b6a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6e:	f7ff fb65 	bl	800133c <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	2864      	cmp	r0, #100	; 0x64
 8001c76:	d9f6      	bls.n	8001c66 <HAL_RCC_OscConfig+0x10e>
 8001c78:	e7de      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	f012 0f0c 	tst.w	r2, #12
 8001c82:	d007      	beq.n	8001c94 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8a:	2a08      	cmp	r2, #8
 8001c8c:	d112      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0259      	lsls	r1, r3, #9
 8001c92:	d40f      	bmi.n	8001cb4 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	0792      	lsls	r2, r2, #30
 8001c9a:	d503      	bpl.n	8001ca4 <HAL_RCC_OscConfig+0x14c>
 8001c9c:	68e2      	ldr	r2, [r4, #12]
 8001c9e:	2a01      	cmp	r2, #1
 8001ca0:	f47f af5d 	bne.w	8001b5e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	6921      	ldr	r1, [r4, #16]
 8001ca8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cac:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001cb0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e75e      	b.n	8001b72 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb4:	68e2      	ldr	r2, [r4, #12]
 8001cb6:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_RCC_OscConfig+0x2e0>)
 8001cb8:	b1b2      	cbz	r2, 8001ce8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fb3d 	bl	800133c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4d5b      	ldr	r5, [pc, #364]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001cc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	079b      	lsls	r3, r3, #30
 8001cca:	d507      	bpl.n	8001cdc <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	6922      	ldr	r2, [r4, #16]
 8001cd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	e74a      	b.n	8001b72 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fb2e 	bl	800133c <HAL_GetTick>
 8001ce0:	1b80      	subs	r0, r0, r6
 8001ce2:	2802      	cmp	r0, #2
 8001ce4:	d9ef      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x16e>
 8001ce6:	e7a7      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001ce8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cea:	f7ff fb27 	bl	800133c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4d50      	ldr	r5, [pc, #320]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001cf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	682b      	ldr	r3, [r5, #0]
 8001cf4:	079f      	lsls	r7, r3, #30
 8001cf6:	f57f af3c 	bpl.w	8001b72 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fb1f 	bl	800133c <HAL_GetTick>
 8001cfe:	1b80      	subs	r0, r0, r6
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9f6      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x19a>
 8001d04:	e798      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	6962      	ldr	r2, [r4, #20]
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x2e4>)
 8001d0a:	b17a      	cbz	r2, 8001d2c <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d10:	f7ff fb14 	bl	800133c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d14:	4d46      	ldr	r5, [pc, #280]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001d16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d1a:	0798      	lsls	r0, r3, #30
 8001d1c:	f53f af2d 	bmi.w	8001b7a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb0c 	bl	800133c <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f6      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1c0>
 8001d2a:	e785      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001d2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fb05 	bl	800133c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d32:	4d3f      	ldr	r5, [pc, #252]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001d34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d38:	0799      	lsls	r1, r3, #30
 8001d3a:	f57f af1e 	bpl.w	8001b7a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fafd 	bl	800133c <HAL_GetTick>
 8001d42:	1b80      	subs	r0, r0, r6
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1de>
 8001d48:	e776      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff faf7 	bl	800133c <HAL_GetTick>
 8001d4e:	1b80      	subs	r0, r0, r6
 8001d50:	2802      	cmp	r0, #2
 8001d52:	f67f af29 	bls.w	8001ba8 <HAL_RCC_OscConfig+0x50>
 8001d56:	e76f      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d104      	bne.n	8001d66 <HAL_RCC_OscConfig+0x20e>
 8001d5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	672b      	str	r3, [r5, #112]	; 0x70
 8001d64:	e729      	b.n	8001bba <HAL_RCC_OscConfig+0x62>
 8001d66:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	672a      	str	r2, [r5, #112]	; 0x70
 8001d6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d70:	f022 0204 	bic.w	r2, r2, #4
 8001d74:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f47f af23 	bne.w	8001bc2 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fade 	bl	800133c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d88:	0798      	lsls	r0, r3, #30
 8001d8a:	f57f af24 	bpl.w	8001bd6 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fad5 	bl	800133c <HAL_GetTick>
 8001d92:	1b80      	subs	r0, r0, r6
 8001d94:	42b8      	cmp	r0, r7
 8001d96:	d9f6      	bls.n	8001d86 <HAL_RCC_OscConfig+0x22e>
 8001d98:	e74e      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff facf 	bl	800133c <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	42b8      	cmp	r0, r7
 8001da2:	f67f af14 	bls.w	8001bce <HAL_RCC_OscConfig+0x76>
 8001da6:	e747      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da8:	4d21      	ldr	r5, [pc, #132]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
 8001daa:	68ab      	ldr	r3, [r5, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f43f aed4 	beq.w	8001b5e <HAL_RCC_OscConfig+0x6>
 8001db6:	4e22      	ldr	r6, [pc, #136]	; (8001e40 <HAL_RCC_OscConfig+0x2e8>)
 8001db8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbe:	d12a      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fabc 	bl	800133c <HAL_GetTick>
 8001dc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	682b      	ldr	r3, [r5, #0]
 8001dc8:	0199      	lsls	r1, r3, #6
 8001dca:	d41e      	bmi.n	8001e0a <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dcc:	6a22      	ldr	r2, [r4, #32]
 8001dce:	69e3      	ldr	r3, [r4, #28]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dd4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	4c13      	ldr	r4, [pc, #76]	; (8001e30 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de2:	0852      	lsrs	r2, r2, #1
 8001de4:	3a01      	subs	r2, #1
 8001de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001dea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dec:	2301      	movs	r3, #1
 8001dee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001df0:	f7ff faa4 	bl	800133c <HAL_GetTick>
 8001df4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	019a      	lsls	r2, r3, #6
 8001dfa:	f53f aef0 	bmi.w	8001bde <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff fa9d 	bl	800133c <HAL_GetTick>
 8001e02:	1b40      	subs	r0, r0, r5
 8001e04:	2802      	cmp	r0, #2
 8001e06:	d9f6      	bls.n	8001df6 <HAL_RCC_OscConfig+0x29e>
 8001e08:	e716      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fa97 	bl	800133c <HAL_GetTick>
 8001e0e:	1bc0      	subs	r0, r0, r7
 8001e10:	2802      	cmp	r0, #2
 8001e12:	d9d8      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x26e>
 8001e14:	e710      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001e16:	f7ff fa91 	bl	800133c <HAL_GetTick>
 8001e1a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	f57f aedd 	bpl.w	8001bde <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff fa8a 	bl	800133c <HAL_GetTick>
 8001e28:	1b00      	subs	r0, r0, r4
 8001e2a:	2802      	cmp	r0, #2
 8001e2c:	d9f6      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2c4>
 8001e2e:	e703      	b.n	8001c38 <HAL_RCC_OscConfig+0xe0>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40007000 	.word	0x40007000
 8001e38:	42470000 	.word	0x42470000
 8001e3c:	42470e80 	.word	0x42470e80
 8001e40:	42470060 	.word	0x42470060

08001e44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e44:	4913      	ldr	r1, [pc, #76]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001e46:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e48:	688b      	ldr	r3, [r1, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x16>
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e56:	4810      	ldr	r0, [pc, #64]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e58:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x58>)
 8001e5c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e5e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e60:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e62:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e64:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e68:	bf14      	ite	ne
 8001e6a:	480c      	ldrne	r0, [pc, #48]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6c:	480a      	ldreq	r0, [pc, #40]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e72:	bf18      	it	ne
 8001e74:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	fba1 0100 	umull	r0, r1, r1, r0
 8001e7e:	f7fe fdbd 	bl	80009fc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001e8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e92:	bd08      	pop	{r3, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	017d7840 	.word	0x017d7840

08001ea0 <HAL_RCC_ClockConfig>:
{
 8001ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	b910      	cbnz	r0, 8001eb0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_ClockConfig+0x124>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f002 020f 	and.w	r2, r2, #15
 8001eb8:	428a      	cmp	r2, r1
 8001eba:	d328      	bcc.n	8001f0e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	6821      	ldr	r1, [r4, #0]
 8001ebe:	078f      	lsls	r7, r1, #30
 8001ec0:	d42d      	bmi.n	8001f1e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	07c8      	lsls	r0, r1, #31
 8001ec4:	d440      	bmi.n	8001f48 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_ClockConfig+0x124>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f002 020f 	and.w	r2, r2, #15
 8001ece:	4295      	cmp	r5, r2
 8001ed0:	d366      	bcc.n	8001fa0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	0751      	lsls	r1, r2, #29
 8001ed6:	d46c      	bmi.n	8001fb2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	0713      	lsls	r3, r2, #28
 8001eda:	d507      	bpl.n	8001eec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001edc:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
 8001ede:	6921      	ldr	r1, [r4, #16]
 8001ee0:	6893      	ldr	r3, [r2, #8]
 8001ee2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ee6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eec:	f7ff ffaa 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
 8001ef2:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x12c>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	40d8      	lsrs	r0, r3
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_ClockConfig+0x130>)
 8001f00:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff f9e4 	bl	80012d0 <HAL_InitTick>
  return HAL_OK;
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	4299      	cmp	r1, r3
 8001f1a:	d1c6      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xa>
 8001f1c:	e7ce      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1c>
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	bf1e      	ittt	ne
 8001f26:	689a      	ldrne	r2, [r3, #8]
 8001f28:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001f2c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	bf42      	ittt	mi
 8001f32:	689a      	ldrmi	r2, [r3, #8]
 8001f34:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001f38:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68a0      	ldr	r0, [r4, #8]
 8001f3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f42:	4302      	orrs	r2, r0
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	e7bc      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f48:	6862      	ldr	r2, [r4, #4]
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
 8001f4c:	2a01      	cmp	r2, #1
 8001f4e:	d11d      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	d0a8      	beq.n	8001eaa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	4e1b      	ldr	r6, [pc, #108]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
 8001f5a:	68b3      	ldr	r3, [r6, #8]
 8001f5c:	f023 0303 	bic.w	r3, r3, #3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f64:	f7ff f9ea 	bl	800133c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f6c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	68b3      	ldr	r3, [r6, #8]
 8001f70:	6862      	ldr	r2, [r4, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f7a:	d0a4      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f9de 	bl	800133c <HAL_GetTick>
 8001f80:	1bc0      	subs	r0, r0, r7
 8001f82:	4540      	cmp	r0, r8
 8001f84:	d9f3      	bls.n	8001f6e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001f86:	2003      	movs	r0, #3
}
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8c:	1e91      	subs	r1, r2, #2
 8001f8e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f92:	d802      	bhi.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f98:	e7dd      	b.n	8001f56 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	f013 0f02 	tst.w	r3, #2
 8001f9e:	e7da      	b.n	8001f56 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa0:	b2ea      	uxtb	r2, r5
 8001fa2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	429d      	cmp	r5, r3
 8001fac:	f47f af7d 	bne.w	8001eaa <HAL_RCC_ClockConfig+0xa>
 8001fb0:	e78f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <HAL_RCC_ClockConfig+0x128>)
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	688b      	ldr	r3, [r1, #8]
 8001fb8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001fbc:	4303      	orrs	r3, r0
 8001fbe:	608b      	str	r3, [r1, #8]
 8001fc0:	e78a      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x38>
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08003064 	.word	0x08003064
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001fd4:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x8>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fe0:	6a03      	ldr	r3, [r0, #32]
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001fea:	6842      	ldr	r2, [r0, #4]
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fee:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ff2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ff6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ff8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ffa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001ffe:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002000:	4c0c      	ldr	r4, [pc, #48]	; (8002034 <TIM_OC1_SetConfig+0x54>)
 8002002:	42a0      	cmp	r0, r4
 8002004:	d009      	beq.n	800201a <TIM_OC1_SetConfig+0x3a>
 8002006:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800200a:	42a0      	cmp	r0, r4
 800200c:	d005      	beq.n	800201a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800200e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002010:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002012:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002014:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002016:	6203      	str	r3, [r0, #32]
} 
 8002018:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800201a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800201c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800201e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002022:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002024:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002026:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800202a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800202c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002030:	4322      	orrs	r2, r4
 8002032:	e7ec      	b.n	800200e <TIM_OC1_SetConfig+0x2e>
 8002034:	40010000 	.word	0x40010000

08002038 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002038:	6a03      	ldr	r3, [r0, #32]
 800203a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002040:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002042:	6842      	ldr	r2, [r0, #4]
{
 8002044:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002046:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002048:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800204a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800204e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002050:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002056:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800205a:	4c0e      	ldr	r4, [pc, #56]	; (8002094 <TIM_OC3_SetConfig+0x5c>)
 800205c:	42a0      	cmp	r0, r4
 800205e:	d009      	beq.n	8002074 <TIM_OC3_SetConfig+0x3c>
 8002060:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002064:	42a0      	cmp	r0, r4
 8002066:	d005      	beq.n	8002074 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002068:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800206a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800206c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800206e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002070:	6203      	str	r3, [r0, #32]
}
 8002072:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002074:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002076:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800207c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002080:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002082:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002086:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800208c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002090:	e7ea      	b.n	8002068 <TIM_OC3_SetConfig+0x30>
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000

08002098 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002098:	6a03      	ldr	r3, [r0, #32]
 800209a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800209e:	6203      	str	r3, [r0, #32]
{
 80020a0:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80020a4:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020a6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020aa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80020b4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020b8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020bc:	4d09      	ldr	r5, [pc, #36]	; (80020e4 <TIM_OC4_SetConfig+0x4c>)
 80020be:	42a8      	cmp	r0, r5
 80020c0:	d009      	beq.n	80020d6 <TIM_OC4_SetConfig+0x3e>
 80020c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c6:	42a8      	cmp	r0, r5
 80020c8:	d005      	beq.n	80020d6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ca:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020cc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80020ce:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80020d0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d2:	6204      	str	r4, [r0, #32]
}
 80020d4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020d6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020dc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80020e0:	e7f3      	b.n	80020ca <TIM_OC4_SetConfig+0x32>
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000

080020e8 <HAL_TIM_PeriodElapsedCallback>:
 80020e8:	4770      	bx	lr

080020ea <HAL_TIM_OC_DelayElapsedCallback>:
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_IC_CaptureCallback>:
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_PWM_PulseFinishedCallback>:
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_TriggerCallback>:
 80020f0:	4770      	bx	lr

080020f2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f2:	6803      	ldr	r3, [r0, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	0791      	lsls	r1, r2, #30
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020fc:	d50e      	bpl.n	800211c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	0792      	lsls	r2, r2, #30
 8002102:	d50b      	bpl.n	800211c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002110:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002112:	d077      	beq.n	8002204 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002114:	f7ff ffea 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002118:	2300      	movs	r3, #0
 800211a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	0750      	lsls	r0, r2, #29
 8002122:	d510      	bpl.n	8002146 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	0751      	lsls	r1, r2, #29
 8002128:	d50d      	bpl.n	8002146 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800212a:	f06f 0204 	mvn.w	r2, #4
 800212e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002130:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002134:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002138:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213c:	d068      	beq.n	8002210 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	f7ff ffd5 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	2300      	movs	r3, #0
 8002144:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	0712      	lsls	r2, r2, #28
 800214c:	d50f      	bpl.n	800216e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	0710      	lsls	r0, r2, #28
 8002152:	d50c      	bpl.n	800216e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800215a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800215e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002160:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	d05a      	beq.n	800221c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	f7ff ffc1 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	2300      	movs	r3, #0
 800216c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	06d2      	lsls	r2, r2, #27
 8002174:	d510      	bpl.n	8002198 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	06d0      	lsls	r0, r2, #27
 800217a:	d50d      	bpl.n	8002198 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800217c:	f06f 0210 	mvn.w	r2, #16
 8002180:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002182:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002184:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002186:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800218a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800218c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218e:	d04b      	beq.n	8002228 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002190:	f7ff ffac 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002194:	2300      	movs	r3, #0
 8002196:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	07d1      	lsls	r1, r2, #31
 800219e:	d508      	bpl.n	80021b2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	07d2      	lsls	r2, r2, #31
 80021a4:	d505      	bpl.n	80021b2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a6:	f06f 0201 	mvn.w	r2, #1
 80021aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff ff9b 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	0610      	lsls	r0, r2, #24
 80021b8:	d508      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	0611      	lsls	r1, r2, #24
 80021be:	d505      	bpl.n	80021cc <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021c6:	4620      	mov	r0, r4
 80021c8:	f000 f9f2 	bl	80025b0 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	0652      	lsls	r2, r2, #25
 80021d2:	d508      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	0650      	lsls	r0, r2, #25
 80021d8:	d505      	bpl.n	80021e6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7ff ff85 	bl	80020f0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	0691      	lsls	r1, r2, #26
 80021ec:	d522      	bpl.n	8002234 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	0692      	lsls	r2, r2, #26
 80021f2:	d51f      	bpl.n	8002234 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80021f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fa:	611a      	str	r2, [r3, #16]
}
 80021fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002200:	f000 b9d5 	b.w	80025ae <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002204:	f7ff ff71 	bl	80020ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff ff70 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
 800220e:	e783      	b.n	8002118 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002210:	f7ff ff6b 	bl	80020ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff ff6a 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
 800221a:	e792      	b.n	8002142 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221c:	f7ff ff65 	bl	80020ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff64 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002226:	e7a0      	b.n	800216a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002228:	f7ff ff5f 	bl	80020ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ff5e 	bl	80020ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002232:	e7af      	b.n	8002194 <HAL_TIM_IRQHandler+0xa2>
 8002234:	bd10      	pop	{r4, pc}
	...

08002238 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800223a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800223c:	4290      	cmp	r0, r2
 800223e:	d012      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002240:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002246:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800224a:	4290      	cmp	r0, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 800224e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002252:	4290      	cmp	r0, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 8002256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225a:	4290      	cmp	r0, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0x2e>
 800225e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002262:	4290      	cmp	r0, r2
 8002264:	d11d      	bne.n	80022a2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002266:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800226c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <TIM_Base_SetConfig+0xbc>)
 8002270:	4290      	cmp	r0, r2
 8002272:	d104      	bne.n	800227e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002274:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	4313      	orrs	r3, r2
 800227c:	e028      	b.n	80022d0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800227e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002282:	d0f7      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <TIM_Base_SetConfig+0xc0>)
 8002286:	4290      	cmp	r0, r2
 8002288:	d0f4      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 800228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228e:	4290      	cmp	r0, r2
 8002290:	d0f0      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 8002292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002296:	4290      	cmp	r0, r2
 8002298:	d0ec      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 800229a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800229e:	4290      	cmp	r0, r2
 80022a0:	d0e8      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <TIM_Base_SetConfig+0xc4>)
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d0e5      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ac:	4290      	cmp	r0, r2
 80022ae:	d0e1      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d0dd      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022bc:	4290      	cmp	r0, r2
 80022be:	d0d9      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c4:	4290      	cmp	r0, r2
 80022c6:	d0d5      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
 80022c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022cc:	4290      	cmp	r0, r2
 80022ce:	d0d1      	beq.n	8002274 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80022d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d2:	688b      	ldr	r3, [r1, #8]
 80022d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022d6:	680b      	ldr	r3, [r1, #0]
 80022d8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <TIM_Base_SetConfig+0xbc>)
 80022dc:	4298      	cmp	r0, r3
 80022de:	d006      	beq.n	80022ee <TIM_Base_SetConfig+0xb6>
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	4298      	cmp	r0, r3
 80022e6:	d002      	beq.n	80022ee <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80022e8:	2301      	movs	r3, #1
 80022ea:	6143      	str	r3, [r0, #20]
}
 80022ec:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80022ee:	690b      	ldr	r3, [r1, #16]
 80022f0:	6303      	str	r3, [r0, #48]	; 0x30
 80022f2:	e7f9      	b.n	80022e8 <TIM_Base_SetConfig+0xb0>
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40014000 	.word	0x40014000

08002300 <HAL_TIM_PWM_Init>:
{
 8002300:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002302:	4604      	mov	r4, r0
 8002304:	b1a0      	cbz	r0, 8002330 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002306:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800230a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800230e:	b91b      	cbnz	r3, 8002318 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002310:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002314:	f7fe fea2 	bl	800105c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002318:	2302      	movs	r3, #2
 800231a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	1d21      	adds	r1, r4, #4
 8002322:	f7ff ff89 	bl	8002238 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002326:	2301      	movs	r3, #1
 8002328:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800232c:	2000      	movs	r0, #0
 800232e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
}  
 8002332:	bd10      	pop	{r4, pc}

08002334 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002334:	6a03      	ldr	r3, [r0, #32]
 8002336:	f023 0310 	bic.w	r3, r3, #16
 800233a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800233c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800233e:	6842      	ldr	r2, [r0, #4]
{
 8002340:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002342:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002344:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002346:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800234a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800234e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002350:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002354:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <TIM_OC2_SetConfig+0x5c>)
 800235a:	42a0      	cmp	r0, r4
 800235c:	d009      	beq.n	8002372 <TIM_OC2_SetConfig+0x3e>
 800235e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002362:	42a0      	cmp	r0, r4
 8002364:	d005      	beq.n	8002372 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002366:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002368:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800236a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800236c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800236e:	6203      	str	r3, [r0, #32]
}
 8002370:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002372:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002374:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800237a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800237e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002380:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002384:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800238a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800238e:	e7ea      	b.n	8002366 <TIM_OC2_SetConfig+0x32>
 8002390:	40010000 	.word	0x40010000

08002394 <HAL_TIM_PWM_ConfigChannel>:
{
 8002394:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002396:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800239a:	2b01      	cmp	r3, #1
{
 800239c:	4604      	mov	r4, r0
 800239e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80023a2:	d025      	beq.n	80023f0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80023a4:	2301      	movs	r3, #1
 80023a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80023aa:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80023ae:	2a0c      	cmp	r2, #12
 80023b0:	d818      	bhi.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80023b2:	e8df f002 	tbb	[pc, r2]
 80023b6:	1707      	.short	0x1707
 80023b8:	171e1717 	.word	0x171e1717
 80023bc:	172f1717 	.word	0x172f1717
 80023c0:	1717      	.short	0x1717
 80023c2:	40          	.byte	0x40
 80023c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023c4:	6820      	ldr	r0, [r4, #0]
 80023c6:	f7ff fe0b 	bl	8001fe0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023cc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	f042 0208 	orr.w	r2, r2, #8
 80023d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023e6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	f7ff ff9e 	bl	8002334 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002412:	e7e6      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002414:	6820      	ldr	r0, [r4, #0]
 8002416:	f7ff fe0f 	bl	8002038 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800241a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800241c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	f042 0208 	orr.w	r2, r2, #8
 8002424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	f022 0204 	bic.w	r2, r2, #4
 800242c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002432:	61da      	str	r2, [r3, #28]
    break;
 8002434:	e7d6      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	f7ff fe2e 	bl	8002098 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800243c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800243e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002456:	e7ec      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002458 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002458:	6a03      	ldr	r3, [r0, #32]
{
 800245a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800245c:	2401      	movs	r4, #1
 800245e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002460:	ea23 0304 	bic.w	r3, r3, r4
 8002464:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002466:	6a03      	ldr	r3, [r0, #32]
 8002468:	408a      	lsls	r2, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	6202      	str	r2, [r0, #32]
 800246e:	bd10      	pop	{r4, pc}

08002470 <HAL_TIM_PWM_Start_IT>:
{
 8002470:	b510      	push	{r4, lr}
 8002472:	4604      	mov	r4, r0
  switch (Channel)
 8002474:	290c      	cmp	r1, #12
 8002476:	d80d      	bhi.n	8002494 <HAL_TIM_PWM_Start_IT+0x24>
 8002478:	e8df f001 	tbb	[pc, r1]
 800247c:	0c0c0c07 	.word	0x0c0c0c07
 8002480:	0c0c0c22 	.word	0x0c0c0c22
 8002484:	0c0c0c27 	.word	0x0c0c0c27
 8002488:	2c          	.byte	0x2c
 8002489:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800248a:	6802      	ldr	r2, [r0, #0]
 800248c:	68d3      	ldr	r3, [r2, #12]
 800248e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002492:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002494:	2201      	movs	r2, #1
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	f7ff ffde 	bl	8002458 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_TIM_PWM_Start_IT+0x70>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_TIM_PWM_Start_IT+0x3c>
 80024a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 80024ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
} 
 80024bc:	2000      	movs	r0, #0
 80024be:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024c0:	6802      	ldr	r2, [r0, #0]
 80024c2:	68d3      	ldr	r3, [r2, #12]
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	e7e3      	b.n	8002492 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024ca:	6802      	ldr	r2, [r0, #0]
 80024cc:	68d3      	ldr	r3, [r2, #12]
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	e7de      	b.n	8002492 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024d4:	6802      	ldr	r2, [r0, #0]
 80024d6:	68d3      	ldr	r3, [r2, #12]
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	e7d9      	b.n	8002492 <HAL_TIM_PWM_Start_IT+0x22>
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000

080024e4 <TIM_CCxNChannelCmd>:
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 80024e4:	6a03      	ldr	r3, [r0, #32]
{
 80024e6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << Channel;
 80024e8:	2404      	movs	r4, #4
 80024ea:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80024ec:	ea23 0304 	bic.w	r3, r3, r4
 80024f0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 80024f2:	6a03      	ldr	r3, [r0, #32]
 80024f4:	408a      	lsls	r2, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	6202      	str	r2, [r0, #32]
 80024fa:	bd10      	pop	{r4, pc}

080024fc <HAL_TIMEx_PWMN_Start>:
{
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002500:	2204      	movs	r2, #4
 8002502:	6800      	ldr	r0, [r0, #0]
 8002504:	f7ff ffee 	bl	80024e4 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800250c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
} 
 800251a:	2000      	movs	r0, #0
 800251c:	bd10      	pop	{r4, pc}

0800251e <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800251e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002522:	2b01      	cmp	r3, #1
{
 8002524:	b510      	push	{r4, lr}
 8002526:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800252a:	d018      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002530:	6803      	ldr	r3, [r0, #0]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002532:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002534:	685a      	ldr	r2, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002536:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002538:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800253c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4322      	orrs	r2, r4
 8002542:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002552:	2301      	movs	r3, #1
 8002554:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002558:	2300      	movs	r3, #0
 800255a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800255e:	4618      	mov	r0, r3
} 
 8002560:	bd10      	pop	{r4, pc}

08002562 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002562:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002566:	2b01      	cmp	r3, #1
 8002568:	d01f      	beq.n	80025aa <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800256a:	68cb      	ldr	r3, [r1, #12]
 800256c:	688a      	ldr	r2, [r1, #8]
 800256e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002572:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002574:	684a      	ldr	r2, [r1, #4]
 8002576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800257c:	680a      	ldr	r2, [r1, #0]
 800257e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002582:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002584:	690a      	ldr	r2, [r1, #16]
 8002586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800258a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800258c:	694a      	ldr	r2, [r1, #20]
 800258e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002592:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002594:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002596:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800259a:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 800259c:	6802      	ldr	r2, [r0, #0]
 800259e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80025a0:	2300      	movs	r3, #0
 80025a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80025a6:	4618      	mov	r0, r3
 80025a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80025aa:	2002      	movs	r0, #2
}
 80025ac:	4770      	bx	lr

080025ae <HAL_TIMEx_CommutationCallback>:
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIMEx_BreakCallback>:
{
 80025b0:	4770      	bx	lr
	...

080025b4 <__libc_init_array>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4e0d      	ldr	r6, [pc, #52]	; (80025ec <__libc_init_array+0x38>)
 80025b8:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <__libc_init_array+0x3c>)
 80025ba:	1ba4      	subs	r4, r4, r6
 80025bc:	10a4      	asrs	r4, r4, #2
 80025be:	2500      	movs	r5, #0
 80025c0:	42a5      	cmp	r5, r4
 80025c2:	d109      	bne.n	80025d8 <__libc_init_array+0x24>
 80025c4:	4e0b      	ldr	r6, [pc, #44]	; (80025f4 <__libc_init_array+0x40>)
 80025c6:	4c0c      	ldr	r4, [pc, #48]	; (80025f8 <__libc_init_array+0x44>)
 80025c8:	f000 fd40 	bl	800304c <_init>
 80025cc:	1ba4      	subs	r4, r4, r6
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	2500      	movs	r5, #0
 80025d2:	42a5      	cmp	r5, r4
 80025d4:	d105      	bne.n	80025e2 <__libc_init_array+0x2e>
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025dc:	4798      	blx	r3
 80025de:	3501      	adds	r5, #1
 80025e0:	e7ee      	b.n	80025c0 <__libc_init_array+0xc>
 80025e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e6:	4798      	blx	r3
 80025e8:	3501      	adds	r5, #1
 80025ea:	e7f2      	b.n	80025d2 <__libc_init_array+0x1e>
 80025ec:	0800344c 	.word	0x0800344c
 80025f0:	0800344c 	.word	0x0800344c
 80025f4:	0800344c 	.word	0x0800344c
 80025f8:	08003450 	.word	0x08003450

080025fc <sinf>:
 80025fc:	ee10 3a10 	vmov	r3, s0
 8002600:	b507      	push	{r0, r1, r2, lr}
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <sinf+0x7c>)
 8002604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002608:	4293      	cmp	r3, r2
 800260a:	dc05      	bgt.n	8002618 <sinf+0x1c>
 800260c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800267c <sinf+0x80>
 8002610:	2000      	movs	r0, #0
 8002612:	f000 fc1d 	bl	8002e50 <__kernel_sinf>
 8002616:	e004      	b.n	8002622 <sinf+0x26>
 8002618:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800261c:	db04      	blt.n	8002628 <sinf+0x2c>
 800261e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002622:	b003      	add	sp, #12
 8002624:	f85d fb04 	ldr.w	pc, [sp], #4
 8002628:	4668      	mov	r0, sp
 800262a:	f000 f829 	bl	8002680 <__ieee754_rem_pio2f>
 800262e:	f000 0003 	and.w	r0, r0, #3
 8002632:	2801      	cmp	r0, #1
 8002634:	d008      	beq.n	8002648 <sinf+0x4c>
 8002636:	2802      	cmp	r0, #2
 8002638:	d00d      	beq.n	8002656 <sinf+0x5a>
 800263a:	b9b0      	cbnz	r0, 800266a <sinf+0x6e>
 800263c:	2001      	movs	r0, #1
 800263e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002642:	ed9d 0a00 	vldr	s0, [sp]
 8002646:	e7e4      	b.n	8002612 <sinf+0x16>
 8002648:	eddd 0a01 	vldr	s1, [sp, #4]
 800264c:	ed9d 0a00 	vldr	s0, [sp]
 8002650:	f000 f942 	bl	80028d8 <__kernel_cosf>
 8002654:	e7e5      	b.n	8002622 <sinf+0x26>
 8002656:	2001      	movs	r0, #1
 8002658:	eddd 0a01 	vldr	s1, [sp, #4]
 800265c:	ed9d 0a00 	vldr	s0, [sp]
 8002660:	f000 fbf6 	bl	8002e50 <__kernel_sinf>
 8002664:	eeb1 0a40 	vneg.f32	s0, s0
 8002668:	e7db      	b.n	8002622 <sinf+0x26>
 800266a:	eddd 0a01 	vldr	s1, [sp, #4]
 800266e:	ed9d 0a00 	vldr	s0, [sp]
 8002672:	f000 f931 	bl	80028d8 <__kernel_cosf>
 8002676:	e7f5      	b.n	8002664 <sinf+0x68>
 8002678:	3f490fd8 	.word	0x3f490fd8
 800267c:	00000000 	.word	0x00000000

08002680 <__ieee754_rem_pio2f>:
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	ee10 6a10 	vmov	r6, s0
 8002686:	4b86      	ldr	r3, [pc, #536]	; (80028a0 <__ieee754_rem_pio2f+0x220>)
 8002688:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800268c:	429c      	cmp	r4, r3
 800268e:	b087      	sub	sp, #28
 8002690:	4605      	mov	r5, r0
 8002692:	dc05      	bgt.n	80026a0 <__ieee754_rem_pio2f+0x20>
 8002694:	2300      	movs	r3, #0
 8002696:	ed85 0a00 	vstr	s0, [r5]
 800269a:	6043      	str	r3, [r0, #4]
 800269c:	2000      	movs	r0, #0
 800269e:	e020      	b.n	80026e2 <__ieee754_rem_pio2f+0x62>
 80026a0:	4b80      	ldr	r3, [pc, #512]	; (80028a4 <__ieee754_rem_pio2f+0x224>)
 80026a2:	429c      	cmp	r4, r3
 80026a4:	dc38      	bgt.n	8002718 <__ieee754_rem_pio2f+0x98>
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80028a8 <__ieee754_rem_pio2f+0x228>
 80026ac:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <__ieee754_rem_pio2f+0x22c>)
 80026ae:	f024 040f 	bic.w	r4, r4, #15
 80026b2:	dd18      	ble.n	80026e6 <__ieee754_rem_pio2f+0x66>
 80026b4:	429c      	cmp	r4, r3
 80026b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80026ba:	bf09      	itett	eq
 80026bc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80028b0 <__ieee754_rem_pio2f+0x230>
 80026c0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80028b4 <__ieee754_rem_pio2f+0x234>
 80026c4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80026c8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80028b8 <__ieee754_rem_pio2f+0x238>
 80026cc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80026d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80026d4:	edc0 6a00 	vstr	s13, [r0]
 80026d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80026e0:	2001      	movs	r0, #1
 80026e2:	b007      	add	sp, #28
 80026e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e6:	429c      	cmp	r4, r3
 80026e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80026ec:	bf09      	itett	eq
 80026ee:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80028b0 <__ieee754_rem_pio2f+0x230>
 80026f2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80028b4 <__ieee754_rem_pio2f+0x234>
 80026f6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80026fa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80028b8 <__ieee754_rem_pio2f+0x238>
 80026fe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002702:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002706:	edc0 6a00 	vstr	s13, [r0]
 800270a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800270e:	edc0 7a01 	vstr	s15, [r0, #4]
 8002712:	f04f 30ff 	mov.w	r0, #4294967295
 8002716:	e7e4      	b.n	80026e2 <__ieee754_rem_pio2f+0x62>
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <__ieee754_rem_pio2f+0x23c>)
 800271a:	429c      	cmp	r4, r3
 800271c:	dc71      	bgt.n	8002802 <__ieee754_rem_pio2f+0x182>
 800271e:	f000 fbdf 	bl	8002ee0 <fabsf>
 8002722:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80028c0 <__ieee754_rem_pio2f+0x240>
 8002726:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800272a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800272e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002732:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80028a8 <__ieee754_rem_pio2f+0x228>
 800273e:	eeb1 7a46 	vneg.f32	s14, s12
 8002742:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002746:	281f      	cmp	r0, #31
 8002748:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80028b4 <__ieee754_rem_pio2f+0x234>
 800274c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002750:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002754:	ee16 3a90 	vmov	r3, s13
 8002758:	dc1c      	bgt.n	8002794 <__ieee754_rem_pio2f+0x114>
 800275a:	1e47      	subs	r7, r0, #1
 800275c:	4959      	ldr	r1, [pc, #356]	; (80028c4 <__ieee754_rem_pio2f+0x244>)
 800275e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002762:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002766:	428a      	cmp	r2, r1
 8002768:	d014      	beq.n	8002794 <__ieee754_rem_pio2f+0x114>
 800276a:	602b      	str	r3, [r5, #0]
 800276c:	ed95 7a00 	vldr	s14, [r5]
 8002770:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002774:	2e00      	cmp	r6, #0
 8002776:	ee30 0a67 	vsub.f32	s0, s0, s15
 800277a:	ed85 0a01 	vstr	s0, [r5, #4]
 800277e:	dab0      	bge.n	80026e2 <__ieee754_rem_pio2f+0x62>
 8002780:	eeb1 7a47 	vneg.f32	s14, s14
 8002784:	eeb1 0a40 	vneg.f32	s0, s0
 8002788:	ed85 7a00 	vstr	s14, [r5]
 800278c:	ed85 0a01 	vstr	s0, [r5, #4]
 8002790:	4240      	negs	r0, r0
 8002792:	e7a6      	b.n	80026e2 <__ieee754_rem_pio2f+0x62>
 8002794:	15e4      	asrs	r4, r4, #23
 8002796:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800279a:	1aa2      	subs	r2, r4, r2
 800279c:	2a08      	cmp	r2, #8
 800279e:	dde4      	ble.n	800276a <__ieee754_rem_pio2f+0xea>
 80027a0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80028b0 <__ieee754_rem_pio2f+0x230>
 80027a4:	eef0 6a40 	vmov.f32	s13, s0
 80027a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80027ac:	ee30 0a66 	vsub.f32	s0, s0, s13
 80027b0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80027b4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80028b8 <__ieee754_rem_pio2f+0x238>
 80027b8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80027bc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80027c0:	eef0 7a40 	vmov.f32	s15, s0
 80027c4:	ee15 3a90 	vmov	r3, s11
 80027c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80027cc:	1aa4      	subs	r4, r4, r2
 80027ce:	2c19      	cmp	r4, #25
 80027d0:	dc04      	bgt.n	80027dc <__ieee754_rem_pio2f+0x15c>
 80027d2:	edc5 5a00 	vstr	s11, [r5]
 80027d6:	eeb0 0a66 	vmov.f32	s0, s13
 80027da:	e7c7      	b.n	800276c <__ieee754_rem_pio2f+0xec>
 80027dc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80028c8 <__ieee754_rem_pio2f+0x248>
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eea7 0a25 	vfma.f32	s0, s14, s11
 80027e8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80027ec:	eee7 7a25 	vfma.f32	s15, s14, s11
 80027f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80028cc <__ieee754_rem_pio2f+0x24c>
 80027f4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80027f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80027fc:	ed85 7a00 	vstr	s14, [r5]
 8002800:	e7b4      	b.n	800276c <__ieee754_rem_pio2f+0xec>
 8002802:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002806:	db06      	blt.n	8002816 <__ieee754_rem_pio2f+0x196>
 8002808:	ee70 7a40 	vsub.f32	s15, s0, s0
 800280c:	edc0 7a01 	vstr	s15, [r0, #4]
 8002810:	edc0 7a00 	vstr	s15, [r0]
 8002814:	e742      	b.n	800269c <__ieee754_rem_pio2f+0x1c>
 8002816:	15e2      	asrs	r2, r4, #23
 8002818:	3a86      	subs	r2, #134	; 0x86
 800281a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002826:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80028d0 <__ieee754_rem_pio2f+0x250>
 800282a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800282e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002832:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800283a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800283e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002846:	ed8d 7a04 	vstr	s14, [sp, #16]
 800284a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800284e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	edcd 7a05 	vstr	s15, [sp, #20]
 800285a:	d11e      	bne.n	800289a <__ieee754_rem_pio2f+0x21a>
 800285c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	bf14      	ite	ne
 8002866:	2302      	movne	r3, #2
 8002868:	2301      	moveq	r3, #1
 800286a:	491a      	ldr	r1, [pc, #104]	; (80028d4 <__ieee754_rem_pio2f+0x254>)
 800286c:	9101      	str	r1, [sp, #4]
 800286e:	2102      	movs	r1, #2
 8002870:	9100      	str	r1, [sp, #0]
 8002872:	a803      	add	r0, sp, #12
 8002874:	4629      	mov	r1, r5
 8002876:	f000 f88d 	bl	8002994 <__kernel_rem_pio2f>
 800287a:	2e00      	cmp	r6, #0
 800287c:	f6bf af31 	bge.w	80026e2 <__ieee754_rem_pio2f+0x62>
 8002880:	edd5 7a00 	vldr	s15, [r5]
 8002884:	eef1 7a67 	vneg.f32	s15, s15
 8002888:	edc5 7a00 	vstr	s15, [r5]
 800288c:	edd5 7a01 	vldr	s15, [r5, #4]
 8002890:	eef1 7a67 	vneg.f32	s15, s15
 8002894:	edc5 7a01 	vstr	s15, [r5, #4]
 8002898:	e77a      	b.n	8002790 <__ieee754_rem_pio2f+0x110>
 800289a:	2303      	movs	r3, #3
 800289c:	e7e5      	b.n	800286a <__ieee754_rem_pio2f+0x1ea>
 800289e:	bf00      	nop
 80028a0:	3f490fd8 	.word	0x3f490fd8
 80028a4:	4016cbe3 	.word	0x4016cbe3
 80028a8:	3fc90f80 	.word	0x3fc90f80
 80028ac:	3fc90fd0 	.word	0x3fc90fd0
 80028b0:	37354400 	.word	0x37354400
 80028b4:	37354443 	.word	0x37354443
 80028b8:	2e85a308 	.word	0x2e85a308
 80028bc:	43490f80 	.word	0x43490f80
 80028c0:	3f22f984 	.word	0x3f22f984
 80028c4:	08003074 	.word	0x08003074
 80028c8:	2e85a300 	.word	0x2e85a300
 80028cc:	248d3132 	.word	0x248d3132
 80028d0:	43800000 	.word	0x43800000
 80028d4:	080030f4 	.word	0x080030f4

080028d8 <__kernel_cosf>:
 80028d8:	ee10 3a10 	vmov	r3, s0
 80028dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80028e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e8:	da05      	bge.n	80028f6 <__kernel_cosf+0x1e>
 80028ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	d03b      	beq.n	800296e <__kernel_cosf+0x96>
 80028f6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80028fa:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8002974 <__kernel_cosf+0x9c>
 80028fe:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002978 <__kernel_cosf+0xa0>
 8002902:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800297c <__kernel_cosf+0xa4>
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <__kernel_cosf+0xa8>)
 8002908:	eea7 6a27 	vfma.f32	s12, s14, s15
 800290c:	4293      	cmp	r3, r2
 800290e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002912:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002916:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8002984 <__kernel_cosf+0xac>
 800291a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800291e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002988 <__kernel_cosf+0xb0>
 8002922:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002926:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800298c <__kernel_cosf+0xb4>
 800292a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800292e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002932:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002936:	dc06      	bgt.n	8002946 <__kernel_cosf+0x6e>
 8002938:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800293c:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8002940:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002944:	4770      	bx	lr
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <__kernel_cosf+0xb8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bfda      	itte	le
 800294c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002950:	ee07 3a90 	vmovle	s15, r3
 8002954:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8002958:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800295c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8002960:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002964:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002968:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800296c:	4770      	bx	lr
 800296e:	eeb0 0a66 	vmov.f32	s0, s13
 8002972:	4770      	bx	lr
 8002974:	310f74f6 	.word	0x310f74f6
 8002978:	ad47d74e 	.word	0xad47d74e
 800297c:	b493f27c 	.word	0xb493f27c
 8002980:	3e999999 	.word	0x3e999999
 8002984:	37d00d01 	.word	0x37d00d01
 8002988:	bab60b61 	.word	0xbab60b61
 800298c:	3d2aaaab 	.word	0x3d2aaaab
 8002990:	3f480000 	.word	0x3f480000

08002994 <__kernel_rem_pio2f>:
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	ed2d 8b04 	vpush	{d8-d9}
 800299c:	b0d7      	sub	sp, #348	; 0x15c
 800299e:	468b      	mov	fp, r1
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	9964      	ldr	r1, [sp, #400]	; 0x190
 80029a4:	4bcb      	ldr	r3, [pc, #812]	; (8002cd4 <__kernel_rem_pio2f+0x340>)
 80029a6:	9002      	str	r0, [sp, #8]
 80029a8:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	9e65      	ldr	r6, [sp, #404]	; 0x194
 80029b0:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 80029b4:	3b01      	subs	r3, #1
 80029b6:	1ed0      	subs	r0, r2, #3
 80029b8:	2408      	movs	r4, #8
 80029ba:	fb90 f0f4 	sdiv	r0, r0, r4
 80029be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80029c2:	1c45      	adds	r5, r0, #1
 80029c4:	1ac7      	subs	r7, r0, r3
 80029c6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80029ca:	eb0a 0e03 	add.w	lr, sl, r3
 80029ce:	ac1a      	add	r4, sp, #104	; 0x68
 80029d0:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 80029d4:	2200      	movs	r2, #0
 80029d6:	4572      	cmp	r2, lr
 80029d8:	dd0f      	ble.n	80029fa <__kernel_rem_pio2f+0x66>
 80029da:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 80029de:	2400      	movs	r4, #0
 80029e0:	4554      	cmp	r4, sl
 80029e2:	dc26      	bgt.n	8002a32 <__kernel_rem_pio2f+0x9e>
 80029e4:	9a01      	ldr	r2, [sp, #4]
 80029e6:	9f02      	ldr	r7, [sp, #8]
 80029e8:	eddf 7abe 	vldr	s15, [pc, #760]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 80029ec:	4422      	add	r2, r4
 80029ee:	a91a      	add	r1, sp, #104	; 0x68
 80029f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80029f4:	f04f 0c00 	mov.w	ip, #0
 80029f8:	e015      	b.n	8002a26 <__kernel_rem_pio2f+0x92>
 80029fa:	42d7      	cmn	r7, r2
 80029fc:	bf5d      	ittte	pl
 80029fe:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8002a02:	ee07 1a90 	vmovpl	s15, r1
 8002a06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002a0a:	eef0 7a47 	vmovmi.f32	s15, s14
 8002a0e:	ece4 7a01 	vstmia	r4!, {s15}
 8002a12:	3201      	adds	r2, #1
 8002a14:	e7df      	b.n	80029d6 <__kernel_rem_pio2f+0x42>
 8002a16:	ecf7 6a01 	vldmia	r7!, {s13}
 8002a1a:	ed32 7a01 	vldmdb	r2!, {s14}
 8002a1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002a22:	f10c 0c01 	add.w	ip, ip, #1
 8002a26:	459c      	cmp	ip, r3
 8002a28:	ddf5      	ble.n	8002a16 <__kernel_rem_pio2f+0x82>
 8002a2a:	ecee 7a01 	vstmia	lr!, {s15}
 8002a2e:	3401      	adds	r4, #1
 8002a30:	e7d6      	b.n	80029e0 <__kernel_rem_pio2f+0x4c>
 8002a32:	aa06      	add	r2, sp, #24
 8002a34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8002a38:	9204      	str	r2, [sp, #16]
 8002a3a:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8002cd8 <__kernel_rem_pio2f+0x344>
 8002a3e:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8002cdc <__kernel_rem_pio2f+0x348>
 8002a42:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8002a46:	9203      	str	r2, [sp, #12]
 8002a48:	4657      	mov	r7, sl
 8002a4a:	aa56      	add	r2, sp, #344	; 0x158
 8002a4c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8002a50:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8002a54:	f108 38ff 	add.w	r8, r8, #4294967295
 8002a58:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8002a5c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002a60:	aa56      	add	r2, sp, #344	; 0x158
 8002a62:	eb02 0008 	add.w	r0, r2, r8
 8002a66:	384c      	subs	r0, #76	; 0x4c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	1abc      	subs	r4, r7, r2
 8002a6c:	2c00      	cmp	r4, #0
 8002a6e:	dc4a      	bgt.n	8002b06 <__kernel_rem_pio2f+0x172>
 8002a70:	4628      	mov	r0, r5
 8002a72:	9305      	str	r3, [sp, #20]
 8002a74:	f000 fa7e 	bl	8002f74 <scalbnf>
 8002a78:	eeb0 8a40 	vmov.f32	s16, s0
 8002a7c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002a80:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002a84:	f000 fa34 	bl	8002ef0 <floorf>
 8002a88:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002a8c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	9b05      	ldr	r3, [sp, #20]
 8002a94:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002a98:	ee17 9a90 	vmov	r9, s15
 8002a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002aa4:	dd44      	ble.n	8002b30 <__kernel_rem_pio2f+0x19c>
 8002aa6:	1e78      	subs	r0, r7, #1
 8002aa8:	aa06      	add	r2, sp, #24
 8002aaa:	f1c5 0408 	rsb	r4, r5, #8
 8002aae:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8002ab2:	fa46 f204 	asr.w	r2, r6, r4
 8002ab6:	4491      	add	r9, r2
 8002ab8:	40a2      	lsls	r2, r4
 8002aba:	1ab6      	subs	r6, r6, r2
 8002abc:	aa06      	add	r2, sp, #24
 8002abe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8002ac2:	f1c5 0207 	rsb	r2, r5, #7
 8002ac6:	4116      	asrs	r6, r2
 8002ac8:	2e00      	cmp	r6, #0
 8002aca:	dd40      	ble.n	8002b4e <__kernel_rem_pio2f+0x1ba>
 8002acc:	2400      	movs	r4, #0
 8002ace:	f109 0901 	add.w	r9, r9, #1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	42a7      	cmp	r7, r4
 8002ad6:	dc75      	bgt.n	8002bc4 <__kernel_rem_pio2f+0x230>
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	dd05      	ble.n	8002ae8 <__kernel_rem_pio2f+0x154>
 8002adc:	2d01      	cmp	r5, #1
 8002ade:	f000 8086 	beq.w	8002bee <__kernel_rem_pio2f+0x25a>
 8002ae2:	2d02      	cmp	r5, #2
 8002ae4:	f000 808d 	beq.w	8002c02 <__kernel_rem_pio2f+0x26e>
 8002ae8:	2e02      	cmp	r6, #2
 8002aea:	d130      	bne.n	8002b4e <__kernel_rem_pio2f+0x1ba>
 8002aec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002af0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002af4:	b358      	cbz	r0, 8002b4e <__kernel_rem_pio2f+0x1ba>
 8002af6:	4628      	mov	r0, r5
 8002af8:	9305      	str	r3, [sp, #20]
 8002afa:	f000 fa3b 	bl	8002f74 <scalbnf>
 8002afe:	9b05      	ldr	r3, [sp, #20]
 8002b00:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002b04:	e023      	b.n	8002b4e <__kernel_rem_pio2f+0x1ba>
 8002b06:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002b0a:	ac06      	add	r4, sp, #24
 8002b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002b18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002b1c:	ee10 1a10 	vmov	r1, s0
 8002b20:	ed30 0a01 	vldmdb	r0!, {s0}
 8002b24:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8002b28:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002b2c:	3201      	adds	r2, #1
 8002b2e:	e79c      	b.n	8002a6a <__kernel_rem_pio2f+0xd6>
 8002b30:	d105      	bne.n	8002b3e <__kernel_rem_pio2f+0x1aa>
 8002b32:	1e7a      	subs	r2, r7, #1
 8002b34:	a906      	add	r1, sp, #24
 8002b36:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8002b3a:	1236      	asrs	r6, r6, #8
 8002b3c:	e7c4      	b.n	8002ac8 <__kernel_rem_pio2f+0x134>
 8002b3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	da39      	bge.n	8002bc0 <__kernel_rem_pio2f+0x22c>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	f040 808d 	bne.w	8002c74 <__kernel_rem_pio2f+0x2e0>
 8002b5a:	1e7c      	subs	r4, r7, #1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4550      	cmp	r0, sl
 8002b62:	da55      	bge.n	8002c10 <__kernel_rem_pio2f+0x27c>
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d164      	bne.n	8002c32 <__kernel_rem_pio2f+0x29e>
 8002b68:	2401      	movs	r4, #1
 8002b6a:	f06f 0003 	mvn.w	r0, #3
 8002b6e:	fb00 f204 	mul.w	r2, r0, r4
 8002b72:	9904      	ldr	r1, [sp, #16]
 8002b74:	588a      	ldr	r2, [r1, r2]
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d050      	beq.n	8002c1c <__kernel_rem_pio2f+0x288>
 8002b7a:	aa56      	add	r2, sp, #344	; 0x158
 8002b7c:	4490      	add	r8, r2
 8002b7e:	9a01      	ldr	r2, [sp, #4]
 8002b80:	a91a      	add	r1, sp, #104	; 0x68
 8002b82:	443a      	add	r2, r7
 8002b84:	1c78      	adds	r0, r7, #1
 8002b86:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8002b8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002b8e:	4427      	add	r7, r4
 8002b90:	42b8      	cmp	r0, r7
 8002b92:	f73f af5a 	bgt.w	8002a4a <__kernel_rem_pio2f+0xb6>
 8002b96:	9903      	ldr	r1, [sp, #12]
 8002b98:	9e02      	ldr	r6, [sp, #8]
 8002b9a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002b9e:	9105      	str	r1, [sp, #20]
 8002ba0:	ee07 1a90 	vmov	s15, r1
 8002ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba8:	2400      	movs	r4, #0
 8002baa:	ece2 7a01 	vstmia	r2!, {s15}
 8002bae:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 8002bb2:	4696      	mov	lr, r2
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	dd33      	ble.n	8002c20 <__kernel_rem_pio2f+0x28c>
 8002bb8:	ece8 7a01 	vstmia	r8!, {s15}
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	e7e7      	b.n	8002b90 <__kernel_rem_pio2f+0x1fc>
 8002bc0:	2602      	movs	r6, #2
 8002bc2:	e783      	b.n	8002acc <__kernel_rem_pio2f+0x138>
 8002bc4:	aa06      	add	r2, sp, #24
 8002bc6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002bca:	b948      	cbnz	r0, 8002be0 <__kernel_rem_pio2f+0x24c>
 8002bcc:	b12a      	cbz	r2, 8002bda <__kernel_rem_pio2f+0x246>
 8002bce:	a906      	add	r1, sp, #24
 8002bd0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002bd4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	3401      	adds	r4, #1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	e779      	b.n	8002ad4 <__kernel_rem_pio2f+0x140>
 8002be0:	a906      	add	r1, sp, #24
 8002be2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002be6:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002bea:	4602      	mov	r2, r0
 8002bec:	e7f5      	b.n	8002bda <__kernel_rem_pio2f+0x246>
 8002bee:	1e7c      	subs	r4, r7, #1
 8002bf0:	aa06      	add	r2, sp, #24
 8002bf2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002bf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bfa:	a906      	add	r1, sp, #24
 8002bfc:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002c00:	e772      	b.n	8002ae8 <__kernel_rem_pio2f+0x154>
 8002c02:	1e7c      	subs	r4, r7, #1
 8002c04:	aa06      	add	r2, sp, #24
 8002c06:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c0e:	e7f4      	b.n	8002bfa <__kernel_rem_pio2f+0x266>
 8002c10:	a906      	add	r1, sp, #24
 8002c12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002c16:	3801      	subs	r0, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	e7a1      	b.n	8002b60 <__kernel_rem_pio2f+0x1cc>
 8002c1c:	3401      	adds	r4, #1
 8002c1e:	e7a6      	b.n	8002b6e <__kernel_rem_pio2f+0x1da>
 8002c20:	ecf6 6a01 	vldmia	r6!, {s13}
 8002c24:	ed3e 7a01 	vldmdb	lr!, {s14}
 8002c28:	3401      	adds	r4, #1
 8002c2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002c2e:	e7c1      	b.n	8002bb4 <__kernel_rem_pio2f+0x220>
 8002c30:	3c01      	subs	r4, #1
 8002c32:	ab06      	add	r3, sp, #24
 8002c34:	3d08      	subs	r5, #8
 8002c36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f8      	beq.n	8002c30 <__kernel_rem_pio2f+0x29c>
 8002c3e:	4628      	mov	r0, r5
 8002c40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c44:	f000 f996 	bl	8002f74 <scalbnf>
 8002c48:	00a3      	lsls	r3, r4, #2
 8002c4a:	aa42      	add	r2, sp, #264	; 0x108
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002cd8 <__kernel_rem_pio2f+0x344>
 8002c52:	18d0      	adds	r0, r2, r3
 8002c54:	4622      	mov	r2, r4
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	da46      	bge.n	8002ce8 <__kernel_rem_pio2f+0x354>
 8002c5a:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	1aa5      	subs	r5, r4, r2
 8002c62:	d460      	bmi.n	8002d26 <__kernel_rem_pio2f+0x392>
 8002c64:	a942      	add	r1, sp, #264	; 0x108
 8002c66:	4f1e      	ldr	r7, [pc, #120]	; (8002ce0 <__kernel_rem_pio2f+0x34c>)
 8002c68:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 8002c6c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8002c70:	2000      	movs	r0, #0
 8002c72:	e050      	b.n	8002d16 <__kernel_rem_pio2f+0x382>
 8002c74:	4268      	negs	r0, r5
 8002c76:	eeb0 0a48 	vmov.f32	s0, s16
 8002c7a:	f000 f97b 	bl	8002f74 <scalbnf>
 8002c7e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002cdc <__kernel_rem_pio2f+0x348>
 8002c82:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	db19      	blt.n	8002cc0 <__kernel_rem_pio2f+0x32c>
 8002c8c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002cd8 <__kernel_rem_pio2f+0x344>
 8002c90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002c94:	aa06      	add	r2, sp, #24
 8002c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9a:	1c7c      	adds	r4, r7, #1
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	3508      	adds	r5, #8
 8002ca2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002caa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002cae:	ee10 3a10 	vmov	r3, s0
 8002cb2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8002cb6:	ee17 3a90 	vmov	r3, s15
 8002cba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002cbe:	e7be      	b.n	8002c3e <__kernel_rem_pio2f+0x2aa>
 8002cc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002cc4:	aa06      	add	r2, sp, #24
 8002cc6:	ee10 3a10 	vmov	r3, s0
 8002cca:	463c      	mov	r4, r7
 8002ccc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8002cd0:	e7b5      	b.n	8002c3e <__kernel_rem_pio2f+0x2aa>
 8002cd2:	bf00      	nop
 8002cd4:	08003438 	.word	0x08003438
 8002cd8:	3b800000 	.word	0x3b800000
 8002cdc:	43800000 	.word	0x43800000
 8002ce0:	0800340c 	.word	0x0800340c
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	a906      	add	r1, sp, #24
 8002cea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002cee:	9101      	str	r1, [sp, #4]
 8002cf0:	ee07 1a90 	vmov	s15, r1
 8002cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002cfe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002d02:	ed60 7a01 	vstmdb	r0!, {s15}
 8002d06:	e7a6      	b.n	8002c56 <__kernel_rem_pio2f+0x2c2>
 8002d08:	ecf7 6a01 	vldmia	r7!, {s13}
 8002d0c:	ecb5 7a01 	vldmia	r5!, {s14}
 8002d10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002d14:	3001      	adds	r0, #1
 8002d16:	4550      	cmp	r0, sl
 8002d18:	dc01      	bgt.n	8002d1e <__kernel_rem_pio2f+0x38a>
 8002d1a:	4290      	cmp	r0, r2
 8002d1c:	ddf4      	ble.n	8002d08 <__kernel_rem_pio2f+0x374>
 8002d1e:	ecee 7a01 	vstmia	lr!, {s15}
 8002d22:	3201      	adds	r2, #1
 8002d24:	e79c      	b.n	8002c60 <__kernel_rem_pio2f+0x2cc>
 8002d26:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002d28:	2a03      	cmp	r2, #3
 8002d2a:	d843      	bhi.n	8002db4 <__kernel_rem_pio2f+0x420>
 8002d2c:	e8df f002 	tbb	[pc, r2]
 8002d30:	021d1d37 	.word	0x021d1d37
 8002d34:	aa2e      	add	r2, sp, #184	; 0xb8
 8002d36:	4413      	add	r3, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	dc55      	bgt.n	8002dec <__kernel_rem_pio2f+0x458>
 8002d40:	461a      	mov	r2, r3
 8002d42:	4620      	mov	r0, r4
 8002d44:	2801      	cmp	r0, #1
 8002d46:	dc61      	bgt.n	8002e0c <__kernel_rem_pio2f+0x478>
 8002d48:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 8002d4c:	2c01      	cmp	r4, #1
 8002d4e:	dc6d      	bgt.n	8002e2c <__kernel_rem_pio2f+0x498>
 8002d50:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8002d54:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d16d      	bne.n	8002e38 <__kernel_rem_pio2f+0x4a4>
 8002d5c:	edcb 6a00 	vstr	s13, [fp]
 8002d60:	ed8b 7a01 	vstr	s14, [fp, #4]
 8002d64:	edcb 7a02 	vstr	s15, [fp, #8]
 8002d68:	e024      	b.n	8002db4 <__kernel_rem_pio2f+0x420>
 8002d6a:	aa2e      	add	r2, sp, #184	; 0xb8
 8002d6c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 8002d70:	4413      	add	r3, r2
 8002d72:	4622      	mov	r2, r4
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	da2a      	bge.n	8002dce <__kernel_rem_pio2f+0x43a>
 8002d78:	b37e      	cbz	r6, 8002dda <__kernel_rem_pio2f+0x446>
 8002d7a:	eef1 7a47 	vneg.f32	s15, s14
 8002d7e:	edcb 7a00 	vstr	s15, [fp]
 8002d82:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8002d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d8a:	aa2f      	add	r2, sp, #188	; 0xbc
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	429c      	cmp	r4, r3
 8002d90:	da26      	bge.n	8002de0 <__kernel_rem_pio2f+0x44c>
 8002d92:	b10e      	cbz	r6, 8002d98 <__kernel_rem_pio2f+0x404>
 8002d94:	eef1 7a67 	vneg.f32	s15, s15
 8002d98:	edcb 7a01 	vstr	s15, [fp, #4]
 8002d9c:	e00a      	b.n	8002db4 <__kernel_rem_pio2f+0x420>
 8002d9e:	aa2e      	add	r2, sp, #184	; 0xb8
 8002da0:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8002ce4 <__kernel_rem_pio2f+0x350>
 8002da4:	4413      	add	r3, r2
 8002da6:	2c00      	cmp	r4, #0
 8002da8:	da0b      	bge.n	8002dc2 <__kernel_rem_pio2f+0x42e>
 8002daa:	b10e      	cbz	r6, 8002db0 <__kernel_rem_pio2f+0x41c>
 8002dac:	eef1 7a67 	vneg.f32	s15, s15
 8002db0:	edcb 7a00 	vstr	s15, [fp]
 8002db4:	f009 0007 	and.w	r0, r9, #7
 8002db8:	b057      	add	sp, #348	; 0x15c
 8002dba:	ecbd 8b04 	vpop	{d8-d9}
 8002dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc2:	ed33 7a01 	vldmdb	r3!, {s14}
 8002dc6:	3c01      	subs	r4, #1
 8002dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dcc:	e7eb      	b.n	8002da6 <__kernel_rem_pio2f+0x412>
 8002dce:	ed73 7a01 	vldmdb	r3!, {s15}
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd8:	e7cc      	b.n	8002d74 <__kernel_rem_pio2f+0x3e0>
 8002dda:	eef0 7a47 	vmov.f32	s15, s14
 8002dde:	e7ce      	b.n	8002d7e <__kernel_rem_pio2f+0x3ea>
 8002de0:	ecb2 7a01 	vldmia	r2!, {s14}
 8002de4:	3301      	adds	r3, #1
 8002de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dea:	e7d0      	b.n	8002d8e <__kernel_rem_pio2f+0x3fa>
 8002dec:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002df0:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002df4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002df8:	3801      	subs	r0, #1
 8002dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e02:	ed62 7a01 	vstmdb	r2!, {s15}
 8002e06:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002e0a:	e797      	b.n	8002d3c <__kernel_rem_pio2f+0x3a8>
 8002e0c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002e10:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002e14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002e18:	3801      	subs	r0, #1
 8002e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ed62 7a01 	vstmdb	r2!, {s15}
 8002e26:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002e2a:	e78b      	b.n	8002d44 <__kernel_rem_pio2f+0x3b0>
 8002e2c:	ed33 7a01 	vldmdb	r3!, {s14}
 8002e30:	3c01      	subs	r4, #1
 8002e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e36:	e789      	b.n	8002d4c <__kernel_rem_pio2f+0x3b8>
 8002e38:	eef1 6a66 	vneg.f32	s13, s13
 8002e3c:	eeb1 7a47 	vneg.f32	s14, s14
 8002e40:	edcb 6a00 	vstr	s13, [fp]
 8002e44:	ed8b 7a01 	vstr	s14, [fp, #4]
 8002e48:	eef1 7a67 	vneg.f32	s15, s15
 8002e4c:	e78a      	b.n	8002d64 <__kernel_rem_pio2f+0x3d0>
 8002e4e:	bf00      	nop

08002e50 <__kernel_sinf>:
 8002e50:	ee10 3a10 	vmov	r3, s0
 8002e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002e5c:	da04      	bge.n	8002e68 <__kernel_sinf+0x18>
 8002e5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e62:	ee17 3a90 	vmov	r3, s15
 8002e66:	b35b      	cbz	r3, 8002ec0 <__kernel_sinf+0x70>
 8002e68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002e6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002ec4 <__kernel_sinf+0x74>
 8002e70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002ec8 <__kernel_sinf+0x78>
 8002e74:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002e78:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002ecc <__kernel_sinf+0x7c>
 8002e7c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002e80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002ed0 <__kernel_sinf+0x80>
 8002e84:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002e88:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002ed4 <__kernel_sinf+0x84>
 8002e8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002e90:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002e94:	b930      	cbnz	r0, 8002ea4 <__kernel_sinf+0x54>
 8002e96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002ed8 <__kernel_sinf+0x88>
 8002e9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002e9e:	eea6 0a86 	vfma.f32	s0, s13, s12
 8002ea2:	4770      	bx	lr
 8002ea4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002ea8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002eac:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002eb0:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002eb4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002edc <__kernel_sinf+0x8c>
 8002eb8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002ebc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2f2ec9d3 	.word	0x2f2ec9d3
 8002ec8:	b2d72f34 	.word	0xb2d72f34
 8002ecc:	3638ef1b 	.word	0x3638ef1b
 8002ed0:	b9500d01 	.word	0xb9500d01
 8002ed4:	3c088889 	.word	0x3c088889
 8002ed8:	be2aaaab 	.word	0xbe2aaaab
 8002edc:	3e2aaaab 	.word	0x3e2aaaab

08002ee0 <fabsf>:
 8002ee0:	ee10 3a10 	vmov	r3, s0
 8002ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	ee00 3a10 	vmov	s0, r3
 8002eec:	4770      	bx	lr
	...

08002ef0 <floorf>:
 8002ef0:	ee10 3a10 	vmov	r3, s0
 8002ef4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002ef8:	0dca      	lsrs	r2, r1, #23
 8002efa:	3a7f      	subs	r2, #127	; 0x7f
 8002efc:	2a16      	cmp	r2, #22
 8002efe:	dc2a      	bgt.n	8002f56 <floorf+0x66>
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	da11      	bge.n	8002f28 <floorf+0x38>
 8002f04:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002f68 <floorf+0x78>
 8002f08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	dd05      	ble.n	8002f22 <floorf+0x32>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da23      	bge.n	8002f62 <floorf+0x72>
 8002f1a:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <floorf+0x7c>)
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	bf18      	it	ne
 8002f20:	4613      	movne	r3, r2
 8002f22:	ee00 3a10 	vmov	s0, r3
 8002f26:	4770      	bx	lr
 8002f28:	4911      	ldr	r1, [pc, #68]	; (8002f70 <floorf+0x80>)
 8002f2a:	4111      	asrs	r1, r2
 8002f2c:	420b      	tst	r3, r1
 8002f2e:	d0fa      	beq.n	8002f26 <floorf+0x36>
 8002f30:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002f68 <floorf+0x78>
 8002f34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f40:	ddef      	ble.n	8002f22 <floorf+0x32>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfbe      	ittt	lt
 8002f46:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8002f4a:	fa40 f202 	asrlt.w	r2, r0, r2
 8002f4e:	189b      	addlt	r3, r3, r2
 8002f50:	ea23 0301 	bic.w	r3, r3, r1
 8002f54:	e7e5      	b.n	8002f22 <floorf+0x32>
 8002f56:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002f5a:	d3e4      	bcc.n	8002f26 <floorf+0x36>
 8002f5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002f60:	4770      	bx	lr
 8002f62:	2300      	movs	r3, #0
 8002f64:	e7dd      	b.n	8002f22 <floorf+0x32>
 8002f66:	bf00      	nop
 8002f68:	7149f2ca 	.word	0x7149f2ca
 8002f6c:	bf800000 	.word	0xbf800000
 8002f70:	007fffff 	.word	0x007fffff

08002f74 <scalbnf>:
 8002f74:	b508      	push	{r3, lr}
 8002f76:	ee10 2a10 	vmov	r2, s0
 8002f7a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8002f7e:	ed2d 8b02 	vpush	{d8}
 8002f82:	eef0 0a40 	vmov.f32	s1, s0
 8002f86:	d004      	beq.n	8002f92 <scalbnf+0x1e>
 8002f88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f8c:	d306      	bcc.n	8002f9c <scalbnf+0x28>
 8002f8e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8002f92:	ecbd 8b02 	vpop	{d8}
 8002f96:	eeb0 0a60 	vmov.f32	s0, s1
 8002f9a:	bd08      	pop	{r3, pc}
 8002f9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa0:	d21c      	bcs.n	8002fdc <scalbnf+0x68>
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <scalbnf+0xac>)
 8002fa4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003024 <scalbnf+0xb0>
 8002fa8:	4298      	cmp	r0, r3
 8002faa:	ee60 0a27 	vmul.f32	s1, s0, s15
 8002fae:	db10      	blt.n	8002fd2 <scalbnf+0x5e>
 8002fb0:	ee10 2a90 	vmov	r2, s1
 8002fb4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002fb8:	3b19      	subs	r3, #25
 8002fba:	4403      	add	r3, r0
 8002fbc:	2bfe      	cmp	r3, #254	; 0xfe
 8002fbe:	dd0f      	ble.n	8002fe0 <scalbnf+0x6c>
 8002fc0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003028 <scalbnf+0xb4>
 8002fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8002fc8:	f000 f834 	bl	8003034 <copysignf>
 8002fcc:	ee60 0a08 	vmul.f32	s1, s0, s16
 8002fd0:	e7df      	b.n	8002f92 <scalbnf+0x1e>
 8002fd2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800302c <scalbnf+0xb8>
 8002fd6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002fda:	e7da      	b.n	8002f92 <scalbnf+0x1e>
 8002fdc:	0ddb      	lsrs	r3, r3, #23
 8002fde:	e7ec      	b.n	8002fba <scalbnf+0x46>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dd06      	ble.n	8002ff2 <scalbnf+0x7e>
 8002fe4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002fe8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002fec:	ee00 3a90 	vmov	s1, r3
 8002ff0:	e7cf      	b.n	8002f92 <scalbnf+0x1e>
 8002ff2:	f113 0f16 	cmn.w	r3, #22
 8002ff6:	da06      	bge.n	8003006 <scalbnf+0x92>
 8002ff8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002ffc:	4298      	cmp	r0, r3
 8002ffe:	dcdf      	bgt.n	8002fc0 <scalbnf+0x4c>
 8003000:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800302c <scalbnf+0xb8>
 8003004:	e7de      	b.n	8002fc4 <scalbnf+0x50>
 8003006:	3319      	adds	r3, #25
 8003008:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800300c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003010:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003030 <scalbnf+0xbc>
 8003014:	ee07 3a10 	vmov	s14, r3
 8003018:	ee67 0a27 	vmul.f32	s1, s14, s15
 800301c:	e7b9      	b.n	8002f92 <scalbnf+0x1e>
 800301e:	bf00      	nop
 8003020:	ffff3cb0 	.word	0xffff3cb0
 8003024:	4c000000 	.word	0x4c000000
 8003028:	7149f2ca 	.word	0x7149f2ca
 800302c:	0da24260 	.word	0x0da24260
 8003030:	33000000 	.word	0x33000000

08003034 <copysignf>:
 8003034:	ee10 3a10 	vmov	r3, s0
 8003038:	ee10 2a90 	vmov	r2, s1
 800303c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003040:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003044:	4313      	orrs	r3, r2
 8003046:	ee00 3a10 	vmov	s0, r3
 800304a:	4770      	bx	lr

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
