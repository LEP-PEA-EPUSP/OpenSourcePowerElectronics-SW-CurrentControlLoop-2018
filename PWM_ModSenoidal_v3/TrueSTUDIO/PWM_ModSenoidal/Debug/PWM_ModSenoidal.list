
PWM_ModSenoidal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08004a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  8 .bss          000000d8  2000001c  2000001c  0002001c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f4  200000f4  0002001c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00005264  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000114b7  00000000  00000000  000252b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fbe  00000000  00000000  00036767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  00038728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00039238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a3f  00000000  00000000  00039c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d6af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030c0  00000000  00000000  0003d72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004610 	.word	0x08004610

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004610 	.word	0x08004610

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b97a 	b.w	8000d48 <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	468c      	mov	ip, r1
 8000a72:	460d      	mov	r5, r1
 8000a74:	4604      	mov	r4, r0
 8000a76:	9e08      	ldr	r6, [sp, #32]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d151      	bne.n	8000b20 <__udivmoddi4+0xb4>
 8000a7c:	428a      	cmp	r2, r1
 8000a7e:	4617      	mov	r7, r2
 8000a80:	d96d      	bls.n	8000b5e <__udivmoddi4+0xf2>
 8000a82:	fab2 fe82 	clz	lr, r2
 8000a86:	f1be 0f00 	cmp.w	lr, #0
 8000a8a:	d00b      	beq.n	8000aa4 <__udivmoddi4+0x38>
 8000a8c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a90:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a98:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a9c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000aa0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aa4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000aa8:	0c25      	lsrs	r5, r4, #16
 8000aaa:	fbbc f8fa 	udiv	r8, ip, sl
 8000aae:	fa1f f987 	uxth.w	r9, r7
 8000ab2:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ab6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000aba:	fb08 f309 	mul.w	r3, r8, r9
 8000abe:	42ab      	cmp	r3, r5
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x6c>
 8000ac2:	19ed      	adds	r5, r5, r7
 8000ac4:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ac8:	f080 8123 	bcs.w	8000d12 <__udivmoddi4+0x2a6>
 8000acc:	42ab      	cmp	r3, r5
 8000ace:	f240 8120 	bls.w	8000d12 <__udivmoddi4+0x2a6>
 8000ad2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad6:	443d      	add	r5, r7
 8000ad8:	1aed      	subs	r5, r5, r3
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ae0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ae4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ae8:	fb00 f909 	mul.w	r9, r0, r9
 8000aec:	45a1      	cmp	r9, r4
 8000aee:	d909      	bls.n	8000b04 <__udivmoddi4+0x98>
 8000af0:	19e4      	adds	r4, r4, r7
 8000af2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af6:	f080 810a 	bcs.w	8000d0e <__udivmoddi4+0x2a2>
 8000afa:	45a1      	cmp	r9, r4
 8000afc:	f240 8107 	bls.w	8000d0e <__udivmoddi4+0x2a2>
 8000b00:	3802      	subs	r0, #2
 8000b02:	443c      	add	r4, r7
 8000b04:	eba4 0409 	sub.w	r4, r4, r9
 8000b08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d061      	beq.n	8000bd6 <__udivmoddi4+0x16a>
 8000b12:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b16:	2300      	movs	r3, #0
 8000b18:	6034      	str	r4, [r6, #0]
 8000b1a:	6073      	str	r3, [r6, #4]
 8000b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d907      	bls.n	8000b34 <__udivmoddi4+0xc8>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d054      	beq.n	8000bd2 <__udivmoddi4+0x166>
 8000b28:	2100      	movs	r1, #0
 8000b2a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b34:	fab3 f183 	clz	r1, r3
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	f040 808e 	bne.w	8000c5a <__udivmoddi4+0x1ee>
 8000b3e:	42ab      	cmp	r3, r5
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xdc>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80fa 	bhi.w	8000d3c <__udivmoddi4+0x2d0>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb65 0503 	sbc.w	r5, r5, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	46ac      	mov	ip, r5
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d03f      	beq.n	8000bd6 <__udivmoddi4+0x16a>
 8000b56:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	b912      	cbnz	r2, 8000b66 <__udivmoddi4+0xfa>
 8000b60:	2701      	movs	r7, #1
 8000b62:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b66:	fab7 fe87 	clz	lr, r7
 8000b6a:	f1be 0f00 	cmp.w	lr, #0
 8000b6e:	d134      	bne.n	8000bda <__udivmoddi4+0x16e>
 8000b70:	1beb      	subs	r3, r5, r7
 8000b72:	0c3a      	lsrs	r2, r7, #16
 8000b74:	fa1f fc87 	uxth.w	ip, r7
 8000b78:	2101      	movs	r1, #1
 8000b7a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b7e:	0c25      	lsrs	r5, r4, #16
 8000b80:	fb02 3318 	mls	r3, r2, r8, r3
 8000b84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b88:	fb0c f308 	mul.w	r3, ip, r8
 8000b8c:	42ab      	cmp	r3, r5
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x134>
 8000b90:	19ed      	adds	r5, r5, r7
 8000b92:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x132>
 8000b98:	42ab      	cmp	r3, r5
 8000b9a:	f200 80d1 	bhi.w	8000d40 <__udivmoddi4+0x2d4>
 8000b9e:	4680      	mov	r8, r0
 8000ba0:	1aed      	subs	r5, r5, r3
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ba8:	fb02 5510 	mls	r5, r2, r0, r5
 8000bac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bb0:	fb0c fc00 	mul.w	ip, ip, r0
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x15c>
 8000bb8:	19e4      	adds	r4, r4, r7
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x15a>
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	f200 80b8 	bhi.w	8000d36 <__udivmoddi4+0x2ca>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 040c 	sub.w	r4, r4, ip
 8000bcc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd0:	e79d      	b.n	8000b0e <__udivmoddi4+0xa2>
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	f1ce 0420 	rsb	r4, lr, #32
 8000bde:	fa05 f30e 	lsl.w	r3, r5, lr
 8000be2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000be6:	fa20 f804 	lsr.w	r8, r0, r4
 8000bea:	0c3a      	lsrs	r2, r7, #16
 8000bec:	fa25 f404 	lsr.w	r4, r5, r4
 8000bf0:	ea48 0803 	orr.w	r8, r8, r3
 8000bf4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bf8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bfc:	fb02 4411 	mls	r4, r2, r1, r4
 8000c00:	fa1f fc87 	uxth.w	ip, r7
 8000c04:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c08:	fb01 f30c 	mul.w	r3, r1, ip
 8000c0c:	42ab      	cmp	r3, r5
 8000c0e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x1bc>
 8000c14:	19ed      	adds	r5, r5, r7
 8000c16:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c1a:	f080 808a 	bcs.w	8000d32 <__udivmoddi4+0x2c6>
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	f240 8087 	bls.w	8000d32 <__udivmoddi4+0x2c6>
 8000c24:	3902      	subs	r1, #2
 8000c26:	443d      	add	r5, r7
 8000c28:	1aeb      	subs	r3, r5, r3
 8000c2a:	fa1f f588 	uxth.w	r5, r8
 8000c2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c32:	fb02 3310 	mls	r3, r2, r0, r3
 8000c36:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c3a:	fb00 f30c 	mul.w	r3, r0, ip
 8000c3e:	42ab      	cmp	r3, r5
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x1e6>
 8000c42:	19ed      	adds	r5, r5, r7
 8000c44:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c48:	d26f      	bcs.n	8000d2a <__udivmoddi4+0x2be>
 8000c4a:	42ab      	cmp	r3, r5
 8000c4c:	d96d      	bls.n	8000d2a <__udivmoddi4+0x2be>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	443d      	add	r5, r7
 8000c52:	1aeb      	subs	r3, r5, r3
 8000c54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c58:	e78f      	b.n	8000b7a <__udivmoddi4+0x10e>
 8000c5a:	f1c1 0720 	rsb	r7, r1, #32
 8000c5e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c62:	408b      	lsls	r3, r1
 8000c64:	fa05 f401 	lsl.w	r4, r5, r1
 8000c68:	ea48 0303 	orr.w	r3, r8, r3
 8000c6c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c70:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c7a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c7e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c82:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c86:	fa1f f883 	uxth.w	r8, r3
 8000c8a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c8e:	fb09 f408 	mul.w	r4, r9, r8
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	fa02 f201 	lsl.w	r2, r2, r1
 8000c98:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x244>
 8000c9e:	18ed      	adds	r5, r5, r3
 8000ca0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca4:	d243      	bcs.n	8000d2e <__udivmoddi4+0x2c2>
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	d941      	bls.n	8000d2e <__udivmoddi4+0x2c2>
 8000caa:	f1a9 0902 	sub.w	r9, r9, #2
 8000cae:	441d      	add	r5, r3
 8000cb0:	1b2d      	subs	r5, r5, r4
 8000cb2:	fa1f fe8e 	uxth.w	lr, lr
 8000cb6:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cba:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cbe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cc2:	fb00 f808 	mul.w	r8, r0, r8
 8000cc6:	45a0      	cmp	r8, r4
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x26e>
 8000cca:	18e4      	adds	r4, r4, r3
 8000ccc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd0:	d229      	bcs.n	8000d26 <__udivmoddi4+0x2ba>
 8000cd2:	45a0      	cmp	r8, r4
 8000cd4:	d927      	bls.n	8000d26 <__udivmoddi4+0x2ba>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	441c      	add	r4, r3
 8000cda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cde:	eba4 0408 	sub.w	r4, r4, r8
 8000ce2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce6:	454c      	cmp	r4, r9
 8000ce8:	46c6      	mov	lr, r8
 8000cea:	464d      	mov	r5, r9
 8000cec:	d315      	bcc.n	8000d1a <__udivmoddi4+0x2ae>
 8000cee:	d012      	beq.n	8000d16 <__udivmoddi4+0x2aa>
 8000cf0:	b156      	cbz	r6, 8000d08 <__udivmoddi4+0x29c>
 8000cf2:	ebba 030e 	subs.w	r3, sl, lr
 8000cf6:	eb64 0405 	sbc.w	r4, r4, r5
 8000cfa:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfe:	40cb      	lsrs	r3, r1
 8000d00:	431f      	orrs	r7, r3
 8000d02:	40cc      	lsrs	r4, r1
 8000d04:	6037      	str	r7, [r6, #0]
 8000d06:	6074      	str	r4, [r6, #4]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	e6f8      	b.n	8000b04 <__udivmoddi4+0x98>
 8000d12:	4690      	mov	r8, r2
 8000d14:	e6e0      	b.n	8000ad8 <__udivmoddi4+0x6c>
 8000d16:	45c2      	cmp	sl, r8
 8000d18:	d2ea      	bcs.n	8000cf0 <__udivmoddi4+0x284>
 8000d1a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d1e:	eb69 0503 	sbc.w	r5, r9, r3
 8000d22:	3801      	subs	r0, #1
 8000d24:	e7e4      	b.n	8000cf0 <__udivmoddi4+0x284>
 8000d26:	4628      	mov	r0, r5
 8000d28:	e7d7      	b.n	8000cda <__udivmoddi4+0x26e>
 8000d2a:	4640      	mov	r0, r8
 8000d2c:	e791      	b.n	8000c52 <__udivmoddi4+0x1e6>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e7be      	b.n	8000cb0 <__udivmoddi4+0x244>
 8000d32:	4601      	mov	r1, r0
 8000d34:	e778      	b.n	8000c28 <__udivmoddi4+0x1bc>
 8000d36:	3802      	subs	r0, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	e745      	b.n	8000bc8 <__udivmoddi4+0x15c>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e708      	b.n	8000b52 <__udivmoddi4+0xe6>
 8000d40:	f1a8 0802 	sub.w	r8, r8, #2
 8000d44:	443d      	add	r5, r7
 8000d46:	e72b      	b.n	8000ba0 <__udivmoddi4+0x134>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d52:	e003      	b.n	8000d5c <LoopCopyDataInit>

08000d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d5a:	3104      	adds	r1, #4

08000d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d64:	d3f6      	bcc.n	8000d54 <CopyDataInit>
  ldr  r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d68:	e002      	b.n	8000d70 <LoopFillZerobss>

08000d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d6c:	f842 3b04 	str.w	r3, [r2], #4

08000d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d74:	d3f9      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d76:	f000 fc2f 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f002 fefd 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f000 f80e 	bl	8000d9e <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d88:	08004a2c 	.word	0x08004a2c
  ldr  r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d90:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000d94:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000d98:	200000f4 	.word	0x200000f4

08000d9c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <CAN1_RX0_IRQHandler>

08000d9e <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f000 fc4f 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f809 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f000 f989 	bl	80010c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dae:	f000 f8fd 	bl	8000fac <MX_TIM1_Init>
  MX_ADC1_Init();
 8000db2:	f000 f879 	bl	8000ea8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000db6:	f000 f8c9 	bl	8000f4c <MX_DAC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <main+0x1c>

08000dbc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	; 0x50
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <SystemClock_Config+0xdc>)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <SystemClock_Config+0xdc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <SystemClock_Config+0xdc>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <SystemClock_Config+0xe0>)
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <SystemClock_Config+0xe0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <SystemClock_Config+0xe0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e02:	2310      	movs	r3, #16
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e12:	23a8      	movs	r3, #168	; 0xa8
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fcae 	bl	8002784 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e2e:	2197      	movs	r1, #151	; 0x97
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <SystemClock_Config+0xe4>)
 8000e32:	f000 f96d 	bl	8001110 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2105      	movs	r1, #5
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 febd 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e60:	21a5      	movs	r1, #165	; 0xa5
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <SystemClock_Config+0xe4>)
 8000e64:	f000 f954 	bl	8001110 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e68:	f002 f84c 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <SystemClock_Config+0xe8>)
 8000e70:	fba3 2302 	umull	r2, r3, r3, r2
 8000e74:	099b      	lsrs	r3, r3, #6
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f9b9 	bl	80021ee <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f001 f9c3 	bl	8002208 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8a:	f001 f986 	bl	800219a <HAL_NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	08004628 	.word	0x08004628
 8000ea4:	10624dd3 	.word	0x10624dd3

08000ea8 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000eb0:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000eb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000eda:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <MX_ADC1_Init+0x9c>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef6:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000ef8:	f000 fbfc 	bl	80016f4 <HAL_ADC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <MX_ADC1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f02:	21ca      	movs	r1, #202	; 0xca
 8000f04:	4810      	ldr	r0, [pc, #64]	; (8000f48 <MX_ADC1_Init+0xa0>)
 8000f06:	f000 f903 	bl	8001110 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f12:	2303      	movs	r3, #3
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000f1c:	f000 fe40 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <MX_ADC1_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f26:	21d4      	movs	r1, #212	; 0xd4
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_ADC1_Init+0xa0>)
 8000f2a:	f000 f8f1 	bl	8001110 <_Error_Handler>
  }

  /*	Habilita o canal ADC-1	*/
  HAL_ADC_Start_IT(&hadc1);
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_ADC1_Init+0x94>)
 8000f30:	f000 fc24 	bl	800177c <HAL_ADC_Start_IT>

}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000058 	.word	0x20000058
 8000f40:	40012000 	.word	0x40012000
 8000f44:	0f000001 	.word	0x0f000001
 8000f48:	08004628 	.word	0x08004628

08000f4c <MX_DAC_Init>:

/* DAC init function */
static void MX_DAC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_DAC_Init+0x58>)
 8000f56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f5a:	f001 f97e 	bl	800225a <HAL_DAC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <MX_DAC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f64:	21e7      	movs	r1, #231	; 0xe7
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <MX_DAC_Init+0x5c>)
 8000f68:	f000 f8d2 	bl	8001110 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f7c:	f001 f9f6 	bl	800236c <HAL_DAC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <MX_DAC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f86:	21f0      	movs	r1, #240	; 0xf0
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_DAC_Init+0x5c>)
 8000f8a:	f000 f8c1 	bl	8001110 <_Error_Handler>
  }

  /*	Habilita o canal DAC-1	*/
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f92:	f001 f984 	bl	800229e <HAL_DAC_Start>

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000a0 	.word	0x200000a0
 8000fa4:	40007400 	.word	0x40007400
 8000fa8:	08004628 	.word	0x08004628

08000fac <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fb4:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <MX_TIM1_Init+0x10c>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fb8:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2170;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fc6:	f640 027a 	movw	r2, #2170	; 0x87a
 8000fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd8:	4836      	ldr	r0, [pc, #216]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000fda:	f001 ff9f 	bl	8002f1c <HAL_TIM_PWM_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000fe4:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000fe8:	4834      	ldr	r0, [pc, #208]	; (80010bc <MX_TIM1_Init+0x110>)
 8000fea:	f000 f891 	bl	8001110 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482d      	ldr	r0, [pc, #180]	; (80010b4 <MX_TIM1_Init+0x108>)
 8000ffe:	f002 fce6 	bl	80039ce <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <MX_TIM1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001008:	f240 110f 	movw	r1, #271	; 0x10f
 800100c:	482b      	ldr	r0, [pc, #172]	; (80010bc <MX_TIM1_Init+0x110>)
 800100e:	f000 f87f 	bl	8001110 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 84;
 8001016:	2354      	movs	r3, #84	; 0x54
 8001018:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	481f      	ldr	r0, [pc, #124]	; (80010b4 <MX_TIM1_Init+0x108>)
 8001038:	f002 f91e 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <MX_TIM1_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001042:	f240 111b 	movw	r1, #283	; 0x11b
 8001046:	481d      	ldr	r0, [pc, #116]	; (80010bc <MX_TIM1_Init+0x110>)
 8001048:	f000 f862 	bl	8001110 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_TIM1_Init+0x108>)
 8001070:	f002 fcf2 	bl	8003a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <MX_TIM1_Init+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800107a:	f240 1127 	movw	r1, #295	; 0x127
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <MX_TIM1_Init+0x110>)
 8001080:	f000 f846 	bl	8001110 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <MX_TIM1_Init+0x108>)
 8001086:	f000 f907 	bl	8001298 <HAL_TIM_MspPostInit>

  /*	Habilita o canal TIM-1	*/
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800108a:	2100      	movs	r1, #0
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_TIM1_Init+0x108>)
 800108e:	f001 ff71 	bl	8002f74 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001092:	2100      	movs	r1, #0
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM1_Init+0x108>)
 8001096:	f002 fc79 	bl	800398c <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_TIM1_Init+0x108>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <MX_TIM1_Init+0x108>)
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	68d2      	ldr	r2, [r2, #12]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	60da      	str	r2, [r3, #12]
}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000b4 	.word	0x200000b4
 80010b8:	40010000 	.word	0x40010000
 80010bc:	08004628 	.word	0x08004628

080010c0 <MX_GPIO_Init>:

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <MX_GPIO_Init+0x4c>)
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_GPIO_Init+0x4c>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <MX_GPIO_Init+0x4c>)
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_GPIO_Init+0x4c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_GPIO_Init+0x4c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800111a:	e7fe      	b.n	800111a <_Error_Handler+0xa>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f001 f82f 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	f06f 000b 	mvn.w	r0, #11
 800112e:	f001 f834 	bl	800219a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	f06f 000a 	mvn.w	r0, #10
 800113a:	f001 f82e 	bl	800219a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	f06f 0009 	mvn.w	r0, #9
 8001146:	f001 f828 	bl	800219a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	f06f 0004 	mvn.w	r0, #4
 8001152:	f001 f822 	bl	800219a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	f06f 0003 	mvn.w	r0, #3
 800115e:	f001 f81c 	bl	800219a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	f06f 0001 	mvn.w	r0, #1
 800116a:	f001 f816 	bl	800219a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	f001 f810 	bl	800219a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0x60>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d121      	bne.n	80011d6 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_ADC_MspInit+0x64>)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_ADC_MspInit+0x64>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_ADC_MspInit+0x64>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_ADC_MspInit+0x68>)
 80011c2:	f001 f945 	bl	8002450 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2012      	movs	r0, #18
 80011cc:	f000 ffe5 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011d0:	2012      	movs	r0, #18
 80011d2:	f000 fffe 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_DAC_MspInit+0x50>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d119      	bne.n	8001232 <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_DAC_MspInit+0x54>)
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_DAC_MspInit+0x54>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_DAC_MspInit+0x54>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800121a:	2310      	movs	r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_DAC_MspInit+0x58>)
 800122e:	f001 f90f 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40007400 	.word	0x40007400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000

08001248 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_TIM_PWM_MspInit+0x48>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d115      	bne.n	8001286 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_TIM_PWM_MspInit+0x4c>)
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_TIM_PWM_MspInit+0x4c>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_TIM_PWM_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2019      	movs	r0, #25
 800127c:	f000 ff8d 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001280:	2019      	movs	r0, #25
 8001282:	f000 ffa6 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010000 	.word	0x40010000
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <HAL_TIM_MspPostInit+0x5c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d120      	bne.n	80012ec <HAL_TIM_MspPostInit+0x54>
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_TIM_MspPostInit+0x60>)
 80012c6:	f001 f8c3 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_TIM_MspPostInit+0x64>)
 80012e8:	f001 f8b2 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010000 	.word	0x40010000
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f9b4 	bl	80016c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001358:	f000 ff72 	bl	8002240 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <ADC_IRQHandler+0x10>)
 8001366:	f000 fab9 	bl	80018dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000058 	.word	0x20000058

08001374 <HAL_ADC_ConvCpltCallback>:

/*		Realiza, via conversao analogico-digital, a leitura que permite obter a corrente de malha	*/
uint32_t adcValue = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
	adcValue = HAL_ADC_GetValue(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fbee 	bl	8001b5e <HAL_ADC_GetValue>
 8001382:	4602      	mov	r2, r0
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000038 	.word	0x20000038
 8001394:	00000000 	.word	0x00000000

08001398 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001398:	b598      	push	{r3, r4, r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/*	O sinal de entrada eh atualizado conforme o ultimo valor calculado para interm; para interm entre -1 e 1, temos
	 * um inteiro entre zero e 2170     */
	TIM1->CCR1 = (uint32_t)((1.0 + interm) * 1085);
 800139c:	4c7a      	ldr	r4, [pc, #488]	; (8001588 <TIM1_UP_TIM10_IRQHandler+0x1f0>)
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f874 	bl	8000490 <__aeabi_f2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b78      	ldr	r3, [pc, #480]	; (8001590 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
 80013ae:	f7fe ff11 	bl	80001d4 <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	a36d      	add	r3, pc, #436	; (adr r3, 8001570 <TIM1_UP_TIM10_IRQHandler+0x1d8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f8ba 	bl	8000538 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fac6 	bl	800095c <__aeabi_d2uiz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	6363      	str	r3, [r4, #52]	; 0x34

	/*	Por regressao linear, esta eh a relacao entre o valor obtido do ADC e a corrente de malha do circuito [A]     */
	corrente = 0.0014*(float)adcValue - 3.0526;
 80013d4:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f854 	bl	8000490 <__aeabi_f2d>
 80013e8:	a363      	add	r3, pc, #396	; (adr r3, 8001578 <TIM1_UP_TIM10_IRQHandler+0x1e0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f8a3 	bl	8000538 <__aeabi_dmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	4618      	mov	r0, r3
 80013f8:	4621      	mov	r1, r4
 80013fa:	a361      	add	r3, pc, #388	; (adr r3, 8001580 <TIM1_UP_TIM10_IRQHandler+0x1e8>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7fe fee6 	bl	80001d0 <__aeabi_dsub>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4618      	mov	r0, r3
 800140a:	4621      	mov	r1, r4
 800140c:	f7ff fac6 	bl	800099c <__aeabi_d2f>
 8001410:	4602      	mov	r2, r0
 8001412:	4b61      	ldr	r3, [pc, #388]	; (8001598 <TIM1_UP_TIM10_IRQHandler+0x200>)
 8001414:	601a      	str	r2, [r3, #0]

  	/*	aux eh incrementada; deve retornar a zero apos 21700, que eh o numero desejado de pontos por ciclo na senoide de
  	 * referencia     */
	aux++;
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x204>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a5f      	ldr	r2, [pc, #380]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x204>)
 800141e:	6013      	str	r3, [r2, #0]
	if (aux >= 21700)
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x204>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f245 42c3 	movw	r2, #21699	; 0x54c3
 8001428:	4293      	cmp	r3, r2
 800142a:	dd02      	ble.n	8001432 <TIM1_UP_TIM10_IRQHandler+0x9a>
		aux = 0;
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x204>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

	/*	Calculo da corrente de referencia; o fator de frequencia eh dado por 2*pi*60Hz / 21700 ~= 0.0173728626; o fator
	 * de ajuste 0.0079 foi determinado experimentalmente     */
	ref = corrente_ref * sinf(fator_freq*(float)aux);
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <TIM1_UP_TIM10_IRQHandler+0x204>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143e:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <TIM1_UP_TIM10_IRQHandler+0x208>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	f002 fbb8 	bl	8003bc0 <sinf>
 8001450:	eeb0 7a40 	vmov.f32	s14, s0
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <TIM1_UP_TIM10_IRQHandler+0x20c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <TIM1_UP_TIM10_IRQHandler+0x210>)
 8001460:	edc3 7a00 	vstr	s15, [r3]

	/*	Calculo da tensao com base na diferenca entre a corrente de referencia e a medida, bem como no erro acumulado
	 * (controle p.i., i.e., proporcional-integral); em seguida, normalizacao com relacao a tensao maxima     */
	erro = corrente - ref;
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <TIM1_UP_TIM10_IRQHandler+0x200>)
 8001466:	ed93 7a00 	vldr	s14, [r3]
 800146a:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <TIM1_UP_TIM10_IRQHandler+0x210>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x214>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
	if (erroAc > -10 && erroAc < 10)
 800147a:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x218>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd14      	ble.n	80014b8 <TIM1_UP_TIM10_IRQHandler+0x120>
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x218>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d50a      	bpl.n	80014b8 <TIM1_UP_TIM10_IRQHandler+0x120>
		erroAc += erro;
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x218>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x214>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x218>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
	tensao = ganhoProporcional * erro + ganhoIntegral * periodo_amost * erroAc;
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <TIM1_UP_TIM10_IRQHandler+0x21c>)
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x214>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <TIM1_UP_TIM10_IRQHandler+0x220>)
 80014ca:	edd3 6a00 	vldr	s13, [r3]
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <TIM1_UP_TIM10_IRQHandler+0x224>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x218>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <TIM1_UP_TIM10_IRQHandler+0x228>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
	interm = tensao / tensaoMax;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <TIM1_UP_TIM10_IRQHandler+0x228>)
 80014ee:	edd3 6a00 	vldr	s13, [r3]
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <TIM1_UP_TIM10_IRQHandler+0x22c>)
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
	if (interm > 1)
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800150c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd04      	ble.n	8001520 <TIM1_UP_TIM10_IRQHandler+0x188>
		interm = 1;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8001518:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00c      	b.n	800153a <TIM1_UP_TIM10_IRQHandler+0x1a2>
	else if (interm < -1)
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d502      	bpl.n	800153a <TIM1_UP_TIM10_IRQHandler+0x1a2>
		interm = -1;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <TIM1_UP_TIM10_IRQHandler+0x230>)
 8001538:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800153a:	4824      	ldr	r0, [pc, #144]	; (80015cc <TIM1_UP_TIM10_IRQHandler+0x234>)
 800153c:	f001 fd94 	bl	8003068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */

  /*	Imprime no pino DAC o sinal correspondente a corrente de referencia		*/
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) ((ref+corrente_ref)*2048));
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <TIM1_UP_TIM10_IRQHandler+0x210>)
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <TIM1_UP_TIM10_IRQHandler+0x20c>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015d0 <TIM1_UP_TIM10_IRQHandler+0x238>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	481b      	ldr	r0, [pc, #108]	; (80015d4 <TIM1_UP_TIM10_IRQHandler+0x23c>)
 8001566:	f000 ff4e 	bl	8002406 <HAL_DAC_SetValue>
}
 800156a:	bf00      	nop
 800156c:	bd98      	pop	{r3, r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	00000000 	.word	0x00000000
 8001574:	4090f400 	.word	0x4090f400
 8001578:	8db8bac7 	.word	0x8db8bac7
 800157c:	3f56f006 	.word	0x3f56f006
 8001580:	8c7e2824 	.word	0x8c7e2824
 8001584:	40086bb9 	.word	0x40086bb9
 8001588:	40010000 	.word	0x40010000
 800158c:	2000003c 	.word	0x2000003c
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	20000038 	.word	0x20000038
 8001598:	20000040 	.word	0x20000040
 800159c:	20000044 	.word	0x20000044
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000048 	.word	0x20000048
 80015ac:	20000050 	.word	0x20000050
 80015b0:	20000054 	.word	0x20000054
 80015b4:	20000010 	.word	0x20000010
 80015b8:	20000014 	.word	0x20000014
 80015bc:	20000004 	.word	0x20000004
 80015c0:	2000004c 	.word	0x2000004c
 80015c4:	20000000 	.word	0x20000000
 80015c8:	bf800000 	.word	0xbf800000
 80015cc:	200000b4 	.word	0x200000b4
 80015d0:	45000000 	.word	0x45000000
 80015d4:	200000a0 	.word	0x200000a0

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4a16      	ldr	r2, [pc, #88]	; (8001638 <SystemInit+0x60>)
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <SystemInit+0x60>)
 80015e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <SystemInit+0x64>)
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <SystemInit+0x64>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <SystemInit+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <SystemInit+0x64>)
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <SystemInit+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <SystemInit+0x64>)
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <SystemInit+0x68>)
 8001612:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001614:	4a09      	ldr	r2, [pc, #36]	; (800163c <SystemInit+0x64>)
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <SystemInit+0x64>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <SystemInit+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x60>)
 8001628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162c:	609a      	str	r2, [r3, #8]
#endif
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	40023800 	.word	0x40023800
 8001640:	24003010 	.word	0x24003010

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 fd89 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fd50 	bl	800111c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_InitTick+0x30>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_InitTick+0x34>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fda6 	bl	80021ee <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a2:	2200      	movs	r2, #0
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
 80016aa:	f000 fd76 	bl	800219a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000018 	.word	0x20000018
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick++;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_IncTick+0x18>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x18>)
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200000f0 	.word	0x200000f0

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200000f0 	.word	0x200000f0

080016f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e033      	b.n	8001772 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fd2d 	bl	8001180 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	f043 0202 	orr.w	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fb4e 	bl	8001de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
 8001762:	e001      	b.n	8001768 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Start_IT+0x1a>
 8001792:	2302      	movs	r3, #2
 8001794:	e093      	b.n	80018be <HAL_ADC_Start_IT+0x142>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d018      	beq.n	80017de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	6892      	ldr	r2, [r2, #8]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_ADC_Start_IT+0x150>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_ADC_Start_IT+0x154>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0c9a      	lsrs	r2, r3, #18
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d067      	beq.n	80018bc <HAL_ADC_Start_IT+0x140>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001816:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_ADC_Start_IT+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f023 0206 	bic.w	r2, r3, #6
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
 8001836:	e002      	b.n	800183e <HAL_ADC_Start_IT+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_ADC_Start_IT+0x158>)
 8001848:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001852:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10f      	bne.n	8001894 <HAL_ADC_Start_IT+0x118>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11c      	bne.n	80018bc <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6892      	ldr	r2, [r2, #8]
 800188c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	e013      	b.n	80018bc <HAL_ADC_Start_IT+0x140>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_ADC_Start_IT+0x15c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10e      	bne.n	80018bc <HAL_ADC_Start_IT+0x140>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	6892      	ldr	r2, [r2, #8]
 80018b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000018 	.word	0x20000018
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	40012300 	.word	0x40012300
 80018d8:	40012000 	.word	0x40012000

080018dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b20      	cmp	r3, #32
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d049      	beq.n	80019b2 <HAL_ADC_IRQHandler+0xd6>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d046      	beq.n	80019b2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d12b      	bne.n	80019a2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d127      	bne.n	80019a2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6852      	ldr	r2, [r2, #4]
 8001978:	f022 0220 	bic.w	r2, r2, #32
 800197c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fce6 	bl	8001374 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0212 	mvn.w	r2, #18
 80019b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d057      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x1b8>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d054      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d139      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d12b      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d124      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11d      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d119      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	6852      	ldr	r2, [r2, #4]
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 faa9 	bl	8001fdc <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 020c 	mvn.w	r2, #12
 8001a92:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b40      	cmp	r3, #64	; 0x40
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d017      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x21a>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f846 	bl	8001b78 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0201 	mvn.w	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d015      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x27a>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f043 0202 	orr.w	r2, r3, #2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0220 	mvn.w	r2, #32
 8001b44:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f820 	bl	8001b8c <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0220 	mvn.w	r2, #32
 8001b54:	601a      	str	r2, [r3, #0]
  }
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ba0:	b490      	push	{r4, r7}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e107      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x22c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d926      	bls.n	8001c1a <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	3b1e      	subs	r3, #30
 8001be6:	2007      	movs	r0, #7
 8001be8:	fa00 f303 	lsl.w	r3, r0, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	400b      	ands	r3, r1
 8001bf0:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68d9      	ldr	r1, [r3, #12]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6898      	ldr	r0, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461c      	mov	r4, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4423      	add	r3, r4
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	fa00 f303 	lsl.w	r3, r0, r3
 8001c14:	430b      	orrs	r3, r1
 8001c16:	60d3      	str	r3, [r2, #12]
 8001c18:	e023      	b.n	8001c62 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6919      	ldr	r1, [r3, #16]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4403      	add	r3, r0
 8001c32:	2007      	movs	r0, #7
 8001c34:	fa00 f303 	lsl.w	r3, r0, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6898      	ldr	r0, [r3, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461c      	mov	r4, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4423      	add	r3, r4
 8001c5a:	fa00 f303 	lsl.w	r3, r0, r3
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d824      	bhi.n	8001cb4 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4003      	ands	r3, r0
 8001c8a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	fa04 f303 	lsl.w	r3, r4, r3
 8001cae:	4303      	orrs	r3, r0
 8001cb0:	634b      	str	r3, [r1, #52]	; 0x34
 8001cb2:	e04c      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d824      	bhi.n	8001d06 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b23      	subs	r3, #35	; 0x23
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4003      	ands	r3, r0
 8001cdc:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6819      	ldr	r1, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461c      	mov	r4, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	; 0x23
 8001cfc:	fa04 f303 	lsl.w	r3, r4, r3
 8001d00:	4303      	orrs	r3, r0
 8001d02:	630b      	str	r3, [r1, #48]	; 0x30
 8001d04:	e023      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	; 0x41
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4003      	ands	r3, r0
 8001d26:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461c      	mov	r4, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b41      	subs	r3, #65	; 0x41
 8001d46:	fa04 f303 	lsl.w	r3, r4, r3
 8001d4a:	4303      	orrs	r3, r0
 8001d4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_ADC_ConfigChannel+0x238>)
 8001d50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <HAL_ADC_ConfigChannel+0x23c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d109      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1d0>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_ADC_ConfigChannel+0x23c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d123      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x222>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d003      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x1ea>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d11b      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_ADC_ConfigChannel+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_ADC_ConfigChannel+0x244>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9a      	lsrs	r2, r3, #18
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc90      	pop	{r4, r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	40012000 	.word	0x40012000
 8001de0:	20000018 	.word	0x20000018
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <ADC_Init+0x1ec>)
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	6852      	ldr	r2, [r2, #4]
 8001e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	6851      	ldr	r1, [r2, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6912      	ldr	r2, [r2, #16]
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	6852      	ldr	r2, [r2, #4]
 8001e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	6851      	ldr	r1, [r2, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6892      	ldr	r2, [r2, #8]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	6891      	ldr	r1, [r2, #8]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <ADC_Init+0x1f0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	6892      	ldr	r2, [r2, #8]
 8001e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6891      	ldr	r1, [r2, #8]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	6892      	ldr	r2, [r2, #8]
 8001eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	6891      	ldr	r1, [r2, #8]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e00f      	b.n	8001ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6892      	ldr	r2, [r2, #8]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	6892      	ldr	r2, [r2, #8]
 8001ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	6892      	ldr	r2, [r2, #8]
 8001ef0:	f022 0202 	bic.w	r2, r2, #2
 8001ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	6891      	ldr	r1, [r2, #8]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6992      	ldr	r2, [r2, #24]
 8001f04:	0052      	lsls	r2, r2, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01b      	beq.n	8001f4a <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	6852      	ldr	r2, [r2, #4]
 8001f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f20:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	6852      	ldr	r2, [r2, #4]
 8001f2c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	6851      	ldr	r1, [r2, #4]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0352      	lsls	r2, r2, #13
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	e007      	b.n	8001f5a <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	6852      	ldr	r2, [r2, #4]
 8001f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f58:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	69d2      	ldr	r2, [r2, #28]
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0512      	lsls	r2, r2, #20
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	6891      	ldr	r1, [r2, #8]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f9e:	0252      	lsls	r2, r2, #9
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	6891      	ldr	r1, [r2, #8]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6952      	ldr	r2, [r2, #20]
 8001fc2:	0292      	lsls	r2, r2, #10
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	0f000001 	.word	0x0f000001

08001fdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800205e:	4909      	ldr	r1, [pc, #36]	; (8002084 <NVIC_EnableIRQ+0x30>)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	da0b      	bge.n	80020b4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	490d      	ldr	r1, [pc, #52]	; (80020d4 <NVIC_SetPriority+0x4c>)
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	3b04      	subs	r3, #4
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b2:	e009      	b.n	80020c8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <NVIC_SetPriority+0x50>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	e000e100 	.word	0xe000e100

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	2201      	movs	r2, #1
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	401a      	ands	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002122:	2101      	movs	r1, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	1e59      	subs	r1, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff90 	bl	8002088 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff2f 	bl	8001ff0 <NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff44 	bl	8002038 <NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff90 	bl	80020dc <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5f 	bl	8002088 <NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff37 	bl	8002054 <NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d106      	bne.n	8002224 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002222:	e005      	b.n	8002230 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002244:	f000 f802 	bl	800224c <HAL_SYSTICK_Callback>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e014      	b.n	8002296 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe ffb5 	bl	80011ec <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_DAC_Start+0x1e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e051      	b.n	8002360 <HAL_DAC_Start+0xc2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	6811      	ldr	r1, [r2, #0]
 80022d2:	2001      	movs	r0, #1
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11a      	bne.n	800231a <HAL_DAC_Start+0x7c>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022fa:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d127      	bne.n	8002352 <HAL_DAC_Start+0xb4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b38      	cmp	r3, #56	; 0x38
 8002306:	d124      	bne.n	8002352 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e01b      	b.n	8002352 <HAL_DAC_Start+0xb4>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002330:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002338:	d10b      	bne.n	8002352 <HAL_DAC_Start+0xb4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002340:	d107      	bne.n	8002352 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	6852      	ldr	r2, [r2, #4]
 800234c:	f042 0202 	orr.w	r2, r2, #2
 8002350:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	795b      	ldrb	r3, [r3, #5]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_DAC_ConfigChannel+0x20>
 8002388:	2302      	movs	r3, #2
 800238a:	e036      	b.n	80023fa <HAL_DAC_ConfigChannel+0x8e>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2202      	movs	r2, #2
 8002396:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80023a0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	6811      	ldr	r1, [r2, #0]
 80023de:	20c0      	movs	r0, #192	; 0xc0
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	43d2      	mvns	r2, r2
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002406:	b480      	push	{r7}
 8002408:	b087      	sub	sp, #28
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3308      	adds	r3, #8
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e004      	b.n	800243a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3314      	adds	r3, #20
 8002438:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	461a      	mov	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e16b      	b.n	8002744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 815a 	bne.w	800273e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x4a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b12      	cmp	r3, #18
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	69b9      	ldr	r1, [r7, #24]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d00b      	beq.n	8002536 <HAL_GPIO_Init+0xe6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800252a:	2b11      	cmp	r3, #17
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b12      	cmp	r3, #18
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80b4 	beq.w	800273e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4a5f      	ldr	r2, [pc, #380]	; (8002758 <HAL_GPIO_Init+0x308>)
 80025dc:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_GPIO_Init+0x308>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_GPIO_Init+0x308>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <HAL_GPIO_Init+0x30c>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a51      	ldr	r2, [pc, #324]	; (8002760 <HAL_GPIO_Init+0x310>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02b      	beq.n	8002676 <HAL_GPIO_Init+0x226>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_GPIO_Init+0x314>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x222>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <HAL_GPIO_Init+0x318>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x21e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_GPIO_Init+0x31c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x21a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4d      	ldr	r2, [pc, #308]	; (8002770 <HAL_GPIO_Init+0x320>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x216>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_GPIO_Init+0x324>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x212>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_GPIO_Init+0x328>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_GPIO_Init+0x32c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x20a>
 8002656:	2307      	movs	r3, #7
 8002658:	e00e      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800265a:	2308      	movs	r3, #8
 800265c:	e00c      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800265e:	2306      	movs	r3, #6
 8002660:	e00a      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002662:	2305      	movs	r3, #5
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002666:	2304      	movs	r3, #4
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002676:	2300      	movs	r3, #0
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f002 0203 	and.w	r2, r2, #3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4093      	lsls	r3, r2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002688:	4934      	ldr	r1, [pc, #208]	; (800275c <HAL_GPIO_Init+0x30c>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002696:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_GPIO_Init+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ba:	4a31      	ldr	r2, [pc, #196]	; (8002780 <HAL_GPIO_Init+0x330>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_GPIO_Init+0x330>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <HAL_GPIO_Init+0x330>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_GPIO_Init+0x330>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_GPIO_Init+0x330>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_GPIO_Init+0x330>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a11      	ldr	r2, [pc, #68]	; (8002780 <HAL_GPIO_Init+0x330>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	f67f ae90 	bls.w	800246c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800274c:	bf00      	nop
 800274e:	3724      	adds	r7, #36	; 0x24
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40023800 	.word	0x40023800
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40021400 	.word	0x40021400
 8002778:	40021800 	.word	0x40021800
 800277c:	40021c00 	.word	0x40021c00
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e213      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	4b9f      	ldr	r3, [pc, #636]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b99      	ldr	r3, [pc, #612]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b95      	ldr	r3, [pc, #596]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e1ee      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4a8d      	ldr	r2, [pc, #564]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027ec:	4b8c      	ldr	r3, [pc, #560]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002804:	4b86      	ldr	r3, [pc, #536]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4a84      	ldr	r2, [pc, #528]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002810:	4b83      	ldr	r3, [pc, #524]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4a7d      	ldr	r2, [pc, #500]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 800282a:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff4e 	bl	80016dc <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe ff4a 	bl	80016dc <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1b3      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe ff3a 	bl	80016dc <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe ff36 	bl	80016dc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e19f      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e173      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4952      	ldr	r1, [pc, #328]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028d8:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x2a0>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe feef 	bl	80016dc <HAL_GetTick>
 80028fe:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe feeb 	bl	80016dc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e154      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	493f      	ldr	r1, [pc, #252]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x2a0>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fece 	bl	80016dc <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe feca 	bl	80016dc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e133      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d030      	beq.n	80029d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCC_OscConfig+0x2a4>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe feae 	bl	80016dc <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe feaa 	bl	80016dc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e113      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e015      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_OscConfig+0x2a4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe fe97 	bl	80016dc <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe fe93 	bl	80016dc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0fc      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8086 	beq.w	8002aea <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_RCC_OscConfig+0x2a8>)
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x2a8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8002a06:	f7fe fe69 	bl	80016dc <HAL_GetTick>
 8002a0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a0c:	e010      	b.n	8002a30 <HAL_RCC_OscConfig+0x2ac>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fe65 	bl	80016dc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d909      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2ac>
      {
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0ce      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
 8002a20:	40023800 	.word	0x40023800
 8002a24:	42470000 	.word	0x42470000
 8002a28:	42470e80 	.word	0x42470e80
 8002a2c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a30:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_OscConfig+0x444>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0e8      	beq.n	8002a0e <HAL_RCC_OscConfig+0x28a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2ce>
 8002a44:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x308>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
 8002a5a:	4a5c      	ldr	r2, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a5c:	4b5b      	ldr	r3, [pc, #364]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4a59      	ldr	r2, [pc, #356]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a68:	4b58      	ldr	r3, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x308>
 8002a74:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a76:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a82:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x33c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fe22 	bl	80016dc <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x32e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fe1e 	bl	80016dc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e085      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x318>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x366>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fe0c 	bl	80016dc <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fe08 	bl	80016dc <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x35a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d064      	beq.n	8002bbc <HAL_RCC_OscConfig+0x438>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d05c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x434>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d141      	bne.n	8002b8a <HAL_RCC_OscConfig+0x406>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_RCC_OscConfig+0x44c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fde6 	bl	80016dc <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fde2 	bl	80016dc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04b      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b32:	4926      	ldr	r1, [pc, #152]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	019b      	lsls	r3, r3, #6
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCC_OscConfig+0x44c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fdbb 	bl	80016dc <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x3f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fdb7 	bl	80016dc <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e020      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3e6>
 8002b88:	e018      	b.n	8002bbc <HAL_RCC_OscConfig+0x438>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x44c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fda4 	bl	80016dc <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fda0 	bl	80016dc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e009      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_RCC_OscConfig+0x448>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x414>
 8002bb6:	e001      	b.n	8002bbc <HAL_RCC_OscConfig+0x438>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x43a>
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	42470060 	.word	0x42470060

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0ca      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b6      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	494f      	ldr	r1, [pc, #316]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07d      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06d      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e065      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4936      	ldr	r1, [pc, #216]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fd0a 	bl	80016dc <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fd06 	bl	80016dc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04d      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d90c      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e030      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4918      	ldr	r1, [pc, #96]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4911      	ldr	r1, [pc, #68]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f81d 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fc86 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	0800463c 	.word	0x0800463c
 8002d94:	20000018 	.word	0x20000018

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da0:	2200      	movs	r2, #0
 8002da2:	60fa      	str	r2, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	617a      	str	r2, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002dac:	2200      	movs	r2, #0
 8002dae:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	f002 020c 	and.w	r2, r2, #12
 8002db8:	2a04      	cmp	r2, #4
 8002dba:	d007      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dbc:	2a08      	cmp	r2, #8
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	f040 8090 	bne.w	8002ee6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCC_GetSysClockFreq+0x164>)
 8002dc8:	613b      	str	r3, [r7, #16]
       break;
 8002dca:	e08f      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dce:	613b      	str	r3, [r7, #16]
      break;
 8002dd0:	e08c      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dd4:	6852      	ldr	r2, [r2, #4]
 8002dd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002dda:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ddc:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dde:	6852      	ldr	r2, [r2, #4]
 8002de0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d023      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	ea03 0301 	and.w	r3, r3, r1
 8002dfe:	ea04 0402 	and.w	r4, r4, r2
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e04:	fb02 f104 	mul.w	r1, r2, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	fb02 f203 	mul.w	r2, r2, r3
 8002e0e:	440a      	add	r2, r1
 8002e10:	493b      	ldr	r1, [pc, #236]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e12:	fba3 0101 	umull	r0, r1, r3, r1
 8002e16:	1853      	adds	r3, r2, r1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	f7fd fe0a 	bl	8000a3c <__aeabi_uldivmod>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e04c      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e30:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e32:	6852      	ldr	r2, [r2, #4]
 8002e34:	0992      	lsrs	r2, r2, #6
 8002e36:	4611      	mov	r1, r2
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002e40:	f04f 0600 	mov.w	r6, #0
 8002e44:	ea05 0501 	and.w	r5, r5, r1
 8002e48:	ea06 0602 	and.w	r6, r6, r2
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4632      	mov	r2, r6
 8002e50:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002e54:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002e58:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	465a      	mov	r2, fp
 8002e60:	46aa      	mov	sl, r5
 8002e62:	46b3      	mov	fp, r6
 8002e64:	4655      	mov	r5, sl
 8002e66:	465e      	mov	r6, fp
 8002e68:	1b4d      	subs	r5, r1, r5
 8002e6a:	eb62 0606 	sbc.w	r6, r2, r6
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4632      	mov	r2, r6
 8002e72:	0194      	lsls	r4, r2, #6
 8002e74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e78:	018b      	lsls	r3, r1, #6
 8002e7a:	1a5b      	subs	r3, r3, r1
 8002e7c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e80:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002e84:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002e88:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002e8c:	4643      	mov	r3, r8
 8002e8e:	464c      	mov	r4, r9
 8002e90:	4655      	mov	r5, sl
 8002e92:	465e      	mov	r6, fp
 8002e94:	18ed      	adds	r5, r5, r3
 8002e96:	eb46 0604 	adc.w	r6, r6, r4
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	4634      	mov	r4, r6
 8002e9e:	02a2      	lsls	r2, r4, #10
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	f7fd fdbc 	bl	8000a3c <__aeabi_uldivmod>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	613b      	str	r3, [r7, #16]
      break;
 8002ee4:	e002      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetSysClockFreq+0x164>)
 8002ee8:	613b      	str	r3, [r7, #16]
      break;
 8002eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eec:	693b      	ldr	r3, [r7, #16]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	017d7840 	.word	0x017d7840

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000018 	.word	0x20000018

08002f1c <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01d      	b.n	8002f6a <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe f980 	bl	8001248 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fa84 	bl	8003468 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}  
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d841      	bhi.n	8003008 <HAL_TIM_PWM_Start_IT+0x94>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_TIM_PWM_Start_IT+0x18>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08003009 	.word	0x08003009
 8002f94:	08003009 	.word	0x08003009
 8002f98:	08003009 	.word	0x08003009
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08003009 	.word	0x08003009
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	08003009 	.word	0x08003009
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	08003009 	.word	0x08003009
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	08002ff7 	.word	0x08002ff7
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	f042 0202 	orr.w	r2, r2, #2
 8002fce:	60da      	str	r2, [r3, #12]
    }
    break;
 8002fd0:	e01b      	b.n	800300a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	68d2      	ldr	r2, [r2, #12]
 8002fdc:	f042 0204 	orr.w	r2, r2, #4
 8002fe0:	60da      	str	r2, [r3, #12]
    }
    break;
 8002fe2:	e012      	b.n	800300a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	60da      	str	r2, [r3, #12]
    }
    break;
 8002ff4:	e009      	b.n	800300a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	68d2      	ldr	r2, [r2, #12]
 8003000:	f042 0210 	orr.w	r2, r2, #16
 8003004:	60da      	str	r2, [r3, #12]
    }
    break;
 8003006:	e000      	b.n	800300a <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8003008:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb4a 	bl	80036ac <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_TIM_PWM_Start_IT+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_PWM_Start_IT+0xb8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_TIM_PWM_Start_IT+0xf0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_TIM_PWM_Start_IT+0xbc>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_TIM_PWM_Start_IT+0xbe>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
} 
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40010000 	.word	0x40010000
 8003064:	40010400 	.word	0x40010400

08003068 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0202 	mvn.w	r2, #2
 8003094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9be 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9b0 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9c1 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0204 	mvn.w	r2, #4
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f994 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f986 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f997 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b08      	cmp	r3, #8
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0208 	mvn.w	r2, #8
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f96a 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f95c 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f96d 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2208      	movs	r2, #8
 8003196:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f940 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f932 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f943 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0201 	mvn.w	r2, #1
 80031e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f90c 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003210:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fc83 	bl	8003b1e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f908 	bl	8003454 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0220 	mvn.w	r2, #32
 8003268:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fc4d 	bl	8003b0a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800328e:	2302      	movs	r3, #2
 8003290:	e0b4      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	f200 809f 	bhi.w	80033e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080033e9 	.word	0x080033e9
 80032b8:	080033e9 	.word	0x080033e9
 80032bc:	080033e9 	.word	0x080033e9
 80032c0:	08003325 	.word	0x08003325
 80032c4:	080033e9 	.word	0x080033e9
 80032c8:	080033e9 	.word	0x080033e9
 80032cc:	080033e9 	.word	0x080033e9
 80032d0:	08003367 	.word	0x08003367
 80032d4:	080033e9 	.word	0x080033e9
 80032d8:	080033e9 	.word	0x080033e9
 80032dc:	080033e9 	.word	0x080033e9
 80032e0:	080033a7 	.word	0x080033a7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa02 	bl	80036f4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	6992      	ldr	r2, [r2, #24]
 80032fa:	f042 0208 	orr.w	r2, r2, #8
 80032fe:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	6992      	ldr	r2, [r2, #24]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	6991      	ldr	r1, [r2, #24]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	6912      	ldr	r2, [r2, #16]
 800331e:	430a      	orrs	r2, r1
 8003320:	619a      	str	r2, [r3, #24]
    }
    break;
 8003322:	e062      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f946 	bl	80035bc <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	6992      	ldr	r2, [r2, #24]
 800333a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	6992      	ldr	r2, [r2, #24]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	6991      	ldr	r1, [r2, #24]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	6912      	ldr	r2, [r2, #16]
 800335e:	0212      	lsls	r2, r2, #8
 8003360:	430a      	orrs	r2, r1
 8003362:	619a      	str	r2, [r3, #24]
    }
    break;
 8003364:	e041      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa35 	bl	80037dc <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	69d2      	ldr	r2, [r2, #28]
 800337c:	f042 0208 	orr.w	r2, r2, #8
 8003380:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	69d2      	ldr	r2, [r2, #28]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	69d1      	ldr	r1, [r2, #28]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	6912      	ldr	r2, [r2, #16]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
    }
    break;
 80033a4:	e021      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa8d 	bl	80038cc <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	69d2      	ldr	r2, [r2, #28]
 80033bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	69d2      	ldr	r2, [r2, #28]
 80033cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	69d1      	ldr	r1, [r2, #28]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	6912      	ldr	r2, [r2, #16]
 80033e0:	0212      	lsls	r2, r2, #8
 80033e2:	430a      	orrs	r2, r1
 80033e4:	61da      	str	r2, [r3, #28]
    }
    break;
 80033e6:	e000      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80033e8:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a44      	ldr	r2, [pc, #272]	; (8003590 <TIM_Base_SetConfig+0x128>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <TIM_Base_SetConfig+0x44>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0x44>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a41      	ldr	r2, [pc, #260]	; (8003594 <TIM_Base_SetConfig+0x12c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0x44>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <TIM_Base_SetConfig+0x130>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0x44>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3f      	ldr	r2, [pc, #252]	; (800359c <TIM_Base_SetConfig+0x134>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x44>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3e      	ldr	r2, [pc, #248]	; (80035a0 <TIM_Base_SetConfig+0x138>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <TIM_Base_SetConfig+0x48>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <TIM_Base_SetConfig+0x4a>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a31      	ldr	r2, [pc, #196]	; (8003590 <TIM_Base_SetConfig+0x128>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02b      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d027      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <TIM_Base_SetConfig+0x12c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d023      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <TIM_Base_SetConfig+0x130>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d01f      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <TIM_Base_SetConfig+0x134>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d01b      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <TIM_Base_SetConfig+0x138>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d017      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2a      	ldr	r2, [pc, #168]	; (80035a4 <TIM_Base_SetConfig+0x13c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <TIM_Base_SetConfig+0x140>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00f      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a28      	ldr	r2, [pc, #160]	; (80035ac <TIM_Base_SetConfig+0x144>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <TIM_Base_SetConfig+0x148>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_Base_SetConfig+0x14c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0xc0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <TIM_Base_SetConfig+0x150>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <TIM_Base_SetConfig+0xc4>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <TIM_Base_SetConfig+0xc6>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <TIM_Base_SetConfig+0x128>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x102>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <TIM_Base_SetConfig+0x138>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <TIM_Base_SetConfig+0x106>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <TIM_Base_SetConfig+0x108>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	40001800 	.word	0x40001800
 80035b4:	40001c00 	.word	0x40001c00
 80035b8:	40002000 	.word	0x40002000

080035bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f023 0320 	bic.w	r3, r3, #32
 8003612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <TIM_OC2_SetConfig+0xe8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_OC2_SetConfig+0x74>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <TIM_OC2_SetConfig+0xec>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <TIM_OC2_SetConfig+0x78>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <TIM_OC2_SetConfig+0x7a>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d021      	beq.n	800367e <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	621a      	str	r2, [r3, #32]
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40010400 	.word	0x40010400

080036ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80036bc:	2201      	movs	r2, #1
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0302 	bic.w	r3, r3, #2
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <TIM_OC1_SetConfig+0xe0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC1_SetConfig+0x70>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <TIM_OC1_SetConfig+0xe4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <TIM_OC1_SetConfig+0x74>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <TIM_OC1_SetConfig+0x76>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01e      	beq.n	80037ac <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 0308 	bic.w	r3, r3, #8
 8003774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0304 	bic.w	r3, r3, #4
 8003786:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
} 
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40010400 	.word	0x40010400

080037dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <TIM_OC3_SetConfig+0xe8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC3_SetConfig+0x72>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <TIM_OC3_SetConfig+0xec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <TIM_OC3_SetConfig+0x76>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <TIM_OC3_SetConfig+0x78>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d021      	beq.n	800389c <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800385e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003872:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800387a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40010400 	.word	0x40010400

080038cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003906:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003922:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <TIM_OC4_SetConfig+0xb8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_OC4_SetConfig+0x74>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a13      	ldr	r2, [pc, #76]	; (8003988 <TIM_OC4_SetConfig+0xbc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <TIM_OC4_SetConfig+0x78>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <TIM_OC4_SetConfig+0x7a>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	019b      	lsls	r3, r3, #6
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40010000 	.word	0x40010000
 8003988:	40010400 	.word	0x40010400

0800398c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2204      	movs	r2, #4
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f8c7 	bl	8003b32 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
} 
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e032      	b.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a04:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6851      	ldr	r1, [r2, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a26:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	6891      	ldr	r1, [r2, #8]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	6852      	ldr	r2, [r2, #4]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
} 
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e044      	b.n	8003afe <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;
 8003b42:	2204      	movs	r2, #4
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4e0d      	ldr	r6, [pc, #52]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7c:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b7e:	1ba4      	subs	r4, r4, r6
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	2500      	movs	r5, #0
 8003b84:	42a5      	cmp	r5, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	4e0b      	ldr	r6, [pc, #44]	; (8003bb8 <__libc_init_array+0x40>)
 8003b8a:	4c0c      	ldr	r4, [pc, #48]	; (8003bbc <__libc_init_array+0x44>)
 8003b8c:	f000 fd40 	bl	8004610 <_init>
 8003b90:	1ba4      	subs	r4, r4, r6
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	2500      	movs	r5, #0
 8003b96:	42a5      	cmp	r5, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba0:	4798      	blx	r3
 8003ba2:	3501      	adds	r5, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003baa:	4798      	blx	r3
 8003bac:	3501      	adds	r5, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	08004a24 	.word	0x08004a24
 8003bb4:	08004a24 	.word	0x08004a24
 8003bb8:	08004a24 	.word	0x08004a24
 8003bbc:	08004a28 	.word	0x08004a28

08003bc0 <sinf>:
 8003bc0:	ee10 3a10 	vmov	r3, s0
 8003bc4:	b507      	push	{r0, r1, r2, lr}
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <sinf+0x7c>)
 8003bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	dc05      	bgt.n	8003bdc <sinf+0x1c>
 8003bd0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003c40 <sinf+0x80>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f000 fc1d 	bl	8004414 <__kernel_sinf>
 8003bda:	e004      	b.n	8003be6 <sinf+0x26>
 8003bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003be0:	db04      	blt.n	8003bec <sinf+0x2c>
 8003be2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003be6:	b003      	add	sp, #12
 8003be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bec:	4668      	mov	r0, sp
 8003bee:	f000 f829 	bl	8003c44 <__ieee754_rem_pio2f>
 8003bf2:	f000 0003 	and.w	r0, r0, #3
 8003bf6:	2801      	cmp	r0, #1
 8003bf8:	d008      	beq.n	8003c0c <sinf+0x4c>
 8003bfa:	2802      	cmp	r0, #2
 8003bfc:	d00d      	beq.n	8003c1a <sinf+0x5a>
 8003bfe:	b9b0      	cbnz	r0, 8003c2e <sinf+0x6e>
 8003c00:	2001      	movs	r0, #1
 8003c02:	eddd 0a01 	vldr	s1, [sp, #4]
 8003c06:	ed9d 0a00 	vldr	s0, [sp]
 8003c0a:	e7e4      	b.n	8003bd6 <sinf+0x16>
 8003c0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003c10:	ed9d 0a00 	vldr	s0, [sp]
 8003c14:	f000 f942 	bl	8003e9c <__kernel_cosf>
 8003c18:	e7e5      	b.n	8003be6 <sinf+0x26>
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003c20:	ed9d 0a00 	vldr	s0, [sp]
 8003c24:	f000 fbf6 	bl	8004414 <__kernel_sinf>
 8003c28:	eeb1 0a40 	vneg.f32	s0, s0
 8003c2c:	e7db      	b.n	8003be6 <sinf+0x26>
 8003c2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003c32:	ed9d 0a00 	vldr	s0, [sp]
 8003c36:	f000 f931 	bl	8003e9c <__kernel_cosf>
 8003c3a:	e7f5      	b.n	8003c28 <sinf+0x68>
 8003c3c:	3f490fd8 	.word	0x3f490fd8
 8003c40:	00000000 	.word	0x00000000

08003c44 <__ieee754_rem_pio2f>:
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	ee10 6a10 	vmov	r6, s0
 8003c4a:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <__ieee754_rem_pio2f+0x220>)
 8003c4c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003c50:	429c      	cmp	r4, r3
 8003c52:	b087      	sub	sp, #28
 8003c54:	4605      	mov	r5, r0
 8003c56:	dc05      	bgt.n	8003c64 <__ieee754_rem_pio2f+0x20>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	ed85 0a00 	vstr	s0, [r5]
 8003c5e:	6043      	str	r3, [r0, #4]
 8003c60:	2000      	movs	r0, #0
 8003c62:	e020      	b.n	8003ca6 <__ieee754_rem_pio2f+0x62>
 8003c64:	4b80      	ldr	r3, [pc, #512]	; (8003e68 <__ieee754_rem_pio2f+0x224>)
 8003c66:	429c      	cmp	r4, r3
 8003c68:	dc38      	bgt.n	8003cdc <__ieee754_rem_pio2f+0x98>
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003e6c <__ieee754_rem_pio2f+0x228>
 8003c70:	4b7f      	ldr	r3, [pc, #508]	; (8003e70 <__ieee754_rem_pio2f+0x22c>)
 8003c72:	f024 040f 	bic.w	r4, r4, #15
 8003c76:	dd18      	ble.n	8003caa <__ieee754_rem_pio2f+0x66>
 8003c78:	429c      	cmp	r4, r3
 8003c7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003c7e:	bf09      	itett	eq
 8003c80:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003e74 <__ieee754_rem_pio2f+0x230>
 8003c84:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8003e78 <__ieee754_rem_pio2f+0x234>
 8003c88:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003c8c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003e7c <__ieee754_rem_pio2f+0x238>
 8003c90:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003c94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c98:	edc0 6a00 	vstr	s13, [r0]
 8003c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ca0:	edc0 7a01 	vstr	s15, [r0, #4]
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	b007      	add	sp, #28
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003caa:	429c      	cmp	r4, r3
 8003cac:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003cb0:	bf09      	itett	eq
 8003cb2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003e74 <__ieee754_rem_pio2f+0x230>
 8003cb6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8003e78 <__ieee754_rem_pio2f+0x234>
 8003cba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003cbe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003e7c <__ieee754_rem_pio2f+0x238>
 8003cc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003cc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cca:	edc0 6a00 	vstr	s13, [r0]
 8003cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cd2:	edc0 7a01 	vstr	s15, [r0, #4]
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	e7e4      	b.n	8003ca6 <__ieee754_rem_pio2f+0x62>
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <__ieee754_rem_pio2f+0x23c>)
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	dc71      	bgt.n	8003dc6 <__ieee754_rem_pio2f+0x182>
 8003ce2:	f000 fbdf 	bl	80044a4 <fabsf>
 8003ce6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003e84 <__ieee754_rem_pio2f+0x240>
 8003cea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003cee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003cfa:	ee17 0a90 	vmov	r0, s15
 8003cfe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003e6c <__ieee754_rem_pio2f+0x228>
 8003d02:	eeb1 7a46 	vneg.f32	s14, s12
 8003d06:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003d0a:	281f      	cmp	r0, #31
 8003d0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003e78 <__ieee754_rem_pio2f+0x234>
 8003d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d14:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003d18:	ee16 3a90 	vmov	r3, s13
 8003d1c:	dc1c      	bgt.n	8003d58 <__ieee754_rem_pio2f+0x114>
 8003d1e:	1e47      	subs	r7, r0, #1
 8003d20:	4959      	ldr	r1, [pc, #356]	; (8003e88 <__ieee754_rem_pio2f+0x244>)
 8003d22:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003d26:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8003d2a:	428a      	cmp	r2, r1
 8003d2c:	d014      	beq.n	8003d58 <__ieee754_rem_pio2f+0x114>
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	ed95 7a00 	vldr	s14, [r5]
 8003d34:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003d38:	2e00      	cmp	r6, #0
 8003d3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003d3e:	ed85 0a01 	vstr	s0, [r5, #4]
 8003d42:	dab0      	bge.n	8003ca6 <__ieee754_rem_pio2f+0x62>
 8003d44:	eeb1 7a47 	vneg.f32	s14, s14
 8003d48:	eeb1 0a40 	vneg.f32	s0, s0
 8003d4c:	ed85 7a00 	vstr	s14, [r5]
 8003d50:	ed85 0a01 	vstr	s0, [r5, #4]
 8003d54:	4240      	negs	r0, r0
 8003d56:	e7a6      	b.n	8003ca6 <__ieee754_rem_pio2f+0x62>
 8003d58:	15e4      	asrs	r4, r4, #23
 8003d5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003d5e:	1aa2      	subs	r2, r4, r2
 8003d60:	2a08      	cmp	r2, #8
 8003d62:	dde4      	ble.n	8003d2e <__ieee754_rem_pio2f+0xea>
 8003d64:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003e74 <__ieee754_rem_pio2f+0x230>
 8003d68:	eef0 6a40 	vmov.f32	s13, s0
 8003d6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003d70:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003d74:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003d78:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003e7c <__ieee754_rem_pio2f+0x238>
 8003d7c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003d80:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003d84:	eef0 7a40 	vmov.f32	s15, s0
 8003d88:	ee15 3a90 	vmov	r3, s11
 8003d8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003d90:	1aa4      	subs	r4, r4, r2
 8003d92:	2c19      	cmp	r4, #25
 8003d94:	dc04      	bgt.n	8003da0 <__ieee754_rem_pio2f+0x15c>
 8003d96:	edc5 5a00 	vstr	s11, [r5]
 8003d9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003d9e:	e7c7      	b.n	8003d30 <__ieee754_rem_pio2f+0xec>
 8003da0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003e8c <__ieee754_rem_pio2f+0x248>
 8003da4:	eeb0 0a66 	vmov.f32	s0, s13
 8003da8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8003dac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003db0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003db4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003e90 <__ieee754_rem_pio2f+0x24c>
 8003db8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003dbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003dc0:	ed85 7a00 	vstr	s14, [r5]
 8003dc4:	e7b4      	b.n	8003d30 <__ieee754_rem_pio2f+0xec>
 8003dc6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003dca:	db06      	blt.n	8003dda <__ieee754_rem_pio2f+0x196>
 8003dcc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003dd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8003dd4:	edc0 7a00 	vstr	s15, [r0]
 8003dd8:	e742      	b.n	8003c60 <__ieee754_rem_pio2f+0x1c>
 8003dda:	15e2      	asrs	r2, r4, #23
 8003ddc:	3a86      	subs	r2, #134	; 0x86
 8003dde:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003dea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003e94 <__ieee754_rem_pio2f+0x250>
 8003dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003df6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003dfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	edcd 7a05 	vstr	s15, [sp, #20]
 8003e1e:	d11e      	bne.n	8003e5e <__ieee754_rem_pio2f+0x21a>
 8003e20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	bf14      	ite	ne
 8003e2a:	2302      	movne	r3, #2
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	491a      	ldr	r1, [pc, #104]	; (8003e98 <__ieee754_rem_pio2f+0x254>)
 8003e30:	9101      	str	r1, [sp, #4]
 8003e32:	2102      	movs	r1, #2
 8003e34:	9100      	str	r1, [sp, #0]
 8003e36:	a803      	add	r0, sp, #12
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f000 f88d 	bl	8003f58 <__kernel_rem_pio2f>
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	f6bf af31 	bge.w	8003ca6 <__ieee754_rem_pio2f+0x62>
 8003e44:	edd5 7a00 	vldr	s15, [r5]
 8003e48:	eef1 7a67 	vneg.f32	s15, s15
 8003e4c:	edc5 7a00 	vstr	s15, [r5]
 8003e50:	edd5 7a01 	vldr	s15, [r5, #4]
 8003e54:	eef1 7a67 	vneg.f32	s15, s15
 8003e58:	edc5 7a01 	vstr	s15, [r5, #4]
 8003e5c:	e77a      	b.n	8003d54 <__ieee754_rem_pio2f+0x110>
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e7e5      	b.n	8003e2e <__ieee754_rem_pio2f+0x1ea>
 8003e62:	bf00      	nop
 8003e64:	3f490fd8 	.word	0x3f490fd8
 8003e68:	4016cbe3 	.word	0x4016cbe3
 8003e6c:	3fc90f80 	.word	0x3fc90f80
 8003e70:	3fc90fd0 	.word	0x3fc90fd0
 8003e74:	37354400 	.word	0x37354400
 8003e78:	37354443 	.word	0x37354443
 8003e7c:	2e85a308 	.word	0x2e85a308
 8003e80:	43490f80 	.word	0x43490f80
 8003e84:	3f22f984 	.word	0x3f22f984
 8003e88:	0800464c 	.word	0x0800464c
 8003e8c:	2e85a300 	.word	0x2e85a300
 8003e90:	248d3132 	.word	0x248d3132
 8003e94:	43800000 	.word	0x43800000
 8003e98:	080046cc 	.word	0x080046cc

08003e9c <__kernel_cosf>:
 8003e9c:	ee10 3a10 	vmov	r3, s0
 8003ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ea4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eac:	da05      	bge.n	8003eba <__kernel_cosf+0x1e>
 8003eae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003eb2:	ee17 2a90 	vmov	r2, s15
 8003eb6:	2a00      	cmp	r2, #0
 8003eb8:	d03b      	beq.n	8003f32 <__kernel_cosf+0x96>
 8003eba:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003ebe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003f38 <__kernel_cosf+0x9c>
 8003ec2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003f3c <__kernel_cosf+0xa0>
 8003ec6:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8003f40 <__kernel_cosf+0xa4>
 8003eca:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <__kernel_cosf+0xa8>)
 8003ecc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	ee60 0a20 	vmul.f32	s1, s0, s1
 8003ed6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003eda:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003f48 <__kernel_cosf+0xac>
 8003ede:	eea7 6a25 	vfma.f32	s12, s14, s11
 8003ee2:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003f4c <__kernel_cosf+0xb0>
 8003ee6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003eea:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8003f50 <__kernel_cosf+0xb4>
 8003eee:	eea7 6a25 	vfma.f32	s12, s14, s11
 8003ef2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003ef6:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003efa:	dc06      	bgt.n	8003f0a <__kernel_cosf+0x6e>
 8003efc:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8003f00:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8003f04:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8003f08:	4770      	bx	lr
 8003f0a:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <__kernel_cosf+0xb8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bfda      	itte	le
 8003f10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003f14:	ee07 3a90 	vmovle	s15, r3
 8003f18:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8003f1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f20:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8003f24:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003f28:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003f2c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8003f30:	4770      	bx	lr
 8003f32:	eeb0 0a66 	vmov.f32	s0, s13
 8003f36:	4770      	bx	lr
 8003f38:	310f74f6 	.word	0x310f74f6
 8003f3c:	ad47d74e 	.word	0xad47d74e
 8003f40:	b493f27c 	.word	0xb493f27c
 8003f44:	3e999999 	.word	0x3e999999
 8003f48:	37d00d01 	.word	0x37d00d01
 8003f4c:	bab60b61 	.word	0xbab60b61
 8003f50:	3d2aaaab 	.word	0x3d2aaaab
 8003f54:	3f480000 	.word	0x3f480000

08003f58 <__kernel_rem_pio2f>:
 8003f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	ed2d 8b04 	vpush	{d8-d9}
 8003f60:	b0d7      	sub	sp, #348	; 0x15c
 8003f62:	468b      	mov	fp, r1
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	9964      	ldr	r1, [sp, #400]	; 0x190
 8003f68:	4bcb      	ldr	r3, [pc, #812]	; (8004298 <__kernel_rem_pio2f+0x340>)
 8003f6a:	9002      	str	r0, [sp, #8]
 8003f6c:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8003f74:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	1ed0      	subs	r0, r2, #3
 8003f7c:	2408      	movs	r4, #8
 8003f7e:	fb90 f0f4 	sdiv	r0, r0, r4
 8003f82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003f86:	1c45      	adds	r5, r0, #1
 8003f88:	1ac7      	subs	r7, r0, r3
 8003f8a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8003f8e:	eb0a 0e03 	add.w	lr, sl, r3
 8003f92:	ac1a      	add	r4, sp, #104	; 0x68
 8003f94:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4572      	cmp	r2, lr
 8003f9c:	dd0f      	ble.n	8003fbe <__kernel_rem_pio2f+0x66>
 8003f9e:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8003fa2:	2400      	movs	r4, #0
 8003fa4:	4554      	cmp	r4, sl
 8003fa6:	dc26      	bgt.n	8003ff6 <__kernel_rem_pio2f+0x9e>
 8003fa8:	9a01      	ldr	r2, [sp, #4]
 8003faa:	9f02      	ldr	r7, [sp, #8]
 8003fac:	eddf 7abe 	vldr	s15, [pc, #760]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8003fb0:	4422      	add	r2, r4
 8003fb2:	a91a      	add	r1, sp, #104	; 0x68
 8003fb4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003fb8:	f04f 0c00 	mov.w	ip, #0
 8003fbc:	e015      	b.n	8003fea <__kernel_rem_pio2f+0x92>
 8003fbe:	42d7      	cmn	r7, r2
 8003fc0:	bf5d      	ittte	pl
 8003fc2:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8003fc6:	ee07 1a90 	vmovpl	s15, r1
 8003fca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003fce:	eef0 7a47 	vmovmi.f32	s15, s14
 8003fd2:	ece4 7a01 	vstmia	r4!, {s15}
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	e7df      	b.n	8003f9a <__kernel_rem_pio2f+0x42>
 8003fda:	ecf7 6a01 	vldmia	r7!, {s13}
 8003fde:	ed32 7a01 	vldmdb	r2!, {s14}
 8003fe2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003fe6:	f10c 0c01 	add.w	ip, ip, #1
 8003fea:	459c      	cmp	ip, r3
 8003fec:	ddf5      	ble.n	8003fda <__kernel_rem_pio2f+0x82>
 8003fee:	ecee 7a01 	vstmia	lr!, {s15}
 8003ff2:	3401      	adds	r4, #1
 8003ff4:	e7d6      	b.n	8003fa4 <__kernel_rem_pio2f+0x4c>
 8003ff6:	aa06      	add	r2, sp, #24
 8003ff8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003ffc:	9204      	str	r2, [sp, #16]
 8003ffe:	eddf 8aa7 	vldr	s17, [pc, #668]	; 800429c <__kernel_rem_pio2f+0x344>
 8004002:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 80042a0 <__kernel_rem_pio2f+0x348>
 8004006:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 800400a:	9203      	str	r2, [sp, #12]
 800400c:	4657      	mov	r7, sl
 800400e:	aa56      	add	r2, sp, #344	; 0x158
 8004010:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8004014:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8004018:	f108 38ff 	add.w	r8, r8, #4294967295
 800401c:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8004020:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004024:	aa56      	add	r2, sp, #344	; 0x158
 8004026:	eb02 0008 	add.w	r0, r2, r8
 800402a:	384c      	subs	r0, #76	; 0x4c
 800402c:	2200      	movs	r2, #0
 800402e:	1abc      	subs	r4, r7, r2
 8004030:	2c00      	cmp	r4, #0
 8004032:	dc4a      	bgt.n	80040ca <__kernel_rem_pio2f+0x172>
 8004034:	4628      	mov	r0, r5
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	f000 fa7e 	bl	8004538 <scalbnf>
 800403c:	eeb0 8a40 	vmov.f32	s16, s0
 8004040:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004044:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004048:	f000 fa34 	bl	80044b4 <floorf>
 800404c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004050:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004054:	2d00      	cmp	r5, #0
 8004056:	9b05      	ldr	r3, [sp, #20]
 8004058:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800405c:	ee17 9a90 	vmov	r9, s15
 8004060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004064:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004068:	dd44      	ble.n	80040f4 <__kernel_rem_pio2f+0x19c>
 800406a:	1e78      	subs	r0, r7, #1
 800406c:	aa06      	add	r2, sp, #24
 800406e:	f1c5 0408 	rsb	r4, r5, #8
 8004072:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004076:	fa46 f204 	asr.w	r2, r6, r4
 800407a:	4491      	add	r9, r2
 800407c:	40a2      	lsls	r2, r4
 800407e:	1ab6      	subs	r6, r6, r2
 8004080:	aa06      	add	r2, sp, #24
 8004082:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8004086:	f1c5 0207 	rsb	r2, r5, #7
 800408a:	4116      	asrs	r6, r2
 800408c:	2e00      	cmp	r6, #0
 800408e:	dd40      	ble.n	8004112 <__kernel_rem_pio2f+0x1ba>
 8004090:	2400      	movs	r4, #0
 8004092:	f109 0901 	add.w	r9, r9, #1
 8004096:	4620      	mov	r0, r4
 8004098:	42a7      	cmp	r7, r4
 800409a:	dc75      	bgt.n	8004188 <__kernel_rem_pio2f+0x230>
 800409c:	2d00      	cmp	r5, #0
 800409e:	dd05      	ble.n	80040ac <__kernel_rem_pio2f+0x154>
 80040a0:	2d01      	cmp	r5, #1
 80040a2:	f000 8086 	beq.w	80041b2 <__kernel_rem_pio2f+0x25a>
 80040a6:	2d02      	cmp	r5, #2
 80040a8:	f000 808d 	beq.w	80041c6 <__kernel_rem_pio2f+0x26e>
 80040ac:	2e02      	cmp	r6, #2
 80040ae:	d130      	bne.n	8004112 <__kernel_rem_pio2f+0x1ba>
 80040b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80040b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80040b8:	b358      	cbz	r0, 8004112 <__kernel_rem_pio2f+0x1ba>
 80040ba:	4628      	mov	r0, r5
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	f000 fa3b 	bl	8004538 <scalbnf>
 80040c2:	9b05      	ldr	r3, [sp, #20]
 80040c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80040c8:	e023      	b.n	8004112 <__kernel_rem_pio2f+0x1ba>
 80040ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 80040ce:	ac06      	add	r4, sp, #24
 80040d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80040dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80040e0:	ee10 1a10 	vmov	r1, s0
 80040e4:	ed30 0a01 	vldmdb	r0!, {s0}
 80040e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80040ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80040f0:	3201      	adds	r2, #1
 80040f2:	e79c      	b.n	800402e <__kernel_rem_pio2f+0xd6>
 80040f4:	d105      	bne.n	8004102 <__kernel_rem_pio2f+0x1aa>
 80040f6:	1e7a      	subs	r2, r7, #1
 80040f8:	a906      	add	r1, sp, #24
 80040fa:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80040fe:	1236      	asrs	r6, r6, #8
 8004100:	e7c4      	b.n	800408c <__kernel_rem_pio2f+0x134>
 8004102:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004106:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	da39      	bge.n	8004184 <__kernel_rem_pio2f+0x22c>
 8004110:	2600      	movs	r6, #0
 8004112:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	f040 808d 	bne.w	8004238 <__kernel_rem_pio2f+0x2e0>
 800411e:	1e7c      	subs	r4, r7, #1
 8004120:	4620      	mov	r0, r4
 8004122:	2200      	movs	r2, #0
 8004124:	4550      	cmp	r0, sl
 8004126:	da55      	bge.n	80041d4 <__kernel_rem_pio2f+0x27c>
 8004128:	2a00      	cmp	r2, #0
 800412a:	d164      	bne.n	80041f6 <__kernel_rem_pio2f+0x29e>
 800412c:	2401      	movs	r4, #1
 800412e:	f06f 0003 	mvn.w	r0, #3
 8004132:	fb00 f204 	mul.w	r2, r0, r4
 8004136:	9904      	ldr	r1, [sp, #16]
 8004138:	588a      	ldr	r2, [r1, r2]
 800413a:	2a00      	cmp	r2, #0
 800413c:	d050      	beq.n	80041e0 <__kernel_rem_pio2f+0x288>
 800413e:	aa56      	add	r2, sp, #344	; 0x158
 8004140:	4490      	add	r8, r2
 8004142:	9a01      	ldr	r2, [sp, #4]
 8004144:	a91a      	add	r1, sp, #104	; 0x68
 8004146:	443a      	add	r2, r7
 8004148:	1c78      	adds	r0, r7, #1
 800414a:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 800414e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004152:	4427      	add	r7, r4
 8004154:	42b8      	cmp	r0, r7
 8004156:	f73f af5a 	bgt.w	800400e <__kernel_rem_pio2f+0xb6>
 800415a:	9903      	ldr	r1, [sp, #12]
 800415c:	9e02      	ldr	r6, [sp, #8]
 800415e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004162:	9105      	str	r1, [sp, #20]
 8004164:	ee07 1a90 	vmov	s15, r1
 8004168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416c:	2400      	movs	r4, #0
 800416e:	ece2 7a01 	vstmia	r2!, {s15}
 8004172:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8004176:	4696      	mov	lr, r2
 8004178:	429c      	cmp	r4, r3
 800417a:	dd33      	ble.n	80041e4 <__kernel_rem_pio2f+0x28c>
 800417c:	ece8 7a01 	vstmia	r8!, {s15}
 8004180:	3001      	adds	r0, #1
 8004182:	e7e7      	b.n	8004154 <__kernel_rem_pio2f+0x1fc>
 8004184:	2602      	movs	r6, #2
 8004186:	e783      	b.n	8004090 <__kernel_rem_pio2f+0x138>
 8004188:	aa06      	add	r2, sp, #24
 800418a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800418e:	b948      	cbnz	r0, 80041a4 <__kernel_rem_pio2f+0x24c>
 8004190:	b12a      	cbz	r2, 800419e <__kernel_rem_pio2f+0x246>
 8004192:	a906      	add	r1, sp, #24
 8004194:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004198:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800419c:	2201      	movs	r2, #1
 800419e:	3401      	adds	r4, #1
 80041a0:	4610      	mov	r0, r2
 80041a2:	e779      	b.n	8004098 <__kernel_rem_pio2f+0x140>
 80041a4:	a906      	add	r1, sp, #24
 80041a6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80041aa:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80041ae:	4602      	mov	r2, r0
 80041b0:	e7f5      	b.n	800419e <__kernel_rem_pio2f+0x246>
 80041b2:	1e7c      	subs	r4, r7, #1
 80041b4:	aa06      	add	r2, sp, #24
 80041b6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80041ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041be:	a906      	add	r1, sp, #24
 80041c0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80041c4:	e772      	b.n	80040ac <__kernel_rem_pio2f+0x154>
 80041c6:	1e7c      	subs	r4, r7, #1
 80041c8:	aa06      	add	r2, sp, #24
 80041ca:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80041ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80041d2:	e7f4      	b.n	80041be <__kernel_rem_pio2f+0x266>
 80041d4:	a906      	add	r1, sp, #24
 80041d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80041da:	3801      	subs	r0, #1
 80041dc:	430a      	orrs	r2, r1
 80041de:	e7a1      	b.n	8004124 <__kernel_rem_pio2f+0x1cc>
 80041e0:	3401      	adds	r4, #1
 80041e2:	e7a6      	b.n	8004132 <__kernel_rem_pio2f+0x1da>
 80041e4:	ecf6 6a01 	vldmia	r6!, {s13}
 80041e8:	ed3e 7a01 	vldmdb	lr!, {s14}
 80041ec:	3401      	adds	r4, #1
 80041ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80041f2:	e7c1      	b.n	8004178 <__kernel_rem_pio2f+0x220>
 80041f4:	3c01      	subs	r4, #1
 80041f6:	ab06      	add	r3, sp, #24
 80041f8:	3d08      	subs	r5, #8
 80041fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f8      	beq.n	80041f4 <__kernel_rem_pio2f+0x29c>
 8004202:	4628      	mov	r0, r5
 8004204:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004208:	f000 f996 	bl	8004538 <scalbnf>
 800420c:	00a3      	lsls	r3, r4, #2
 800420e:	aa42      	add	r2, sp, #264	; 0x108
 8004210:	3304      	adds	r3, #4
 8004212:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800429c <__kernel_rem_pio2f+0x344>
 8004216:	18d0      	adds	r0, r2, r3
 8004218:	4622      	mov	r2, r4
 800421a:	2a00      	cmp	r2, #0
 800421c:	da46      	bge.n	80042ac <__kernel_rem_pio2f+0x354>
 800421e:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8004222:	2200      	movs	r2, #0
 8004224:	1aa5      	subs	r5, r4, r2
 8004226:	d460      	bmi.n	80042ea <__kernel_rem_pio2f+0x392>
 8004228:	a942      	add	r1, sp, #264	; 0x108
 800422a:	4f1e      	ldr	r7, [pc, #120]	; (80042a4 <__kernel_rem_pio2f+0x34c>)
 800422c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8004230:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004234:	2000      	movs	r0, #0
 8004236:	e050      	b.n	80042da <__kernel_rem_pio2f+0x382>
 8004238:	4268      	negs	r0, r5
 800423a:	eeb0 0a48 	vmov.f32	s0, s16
 800423e:	f000 f97b 	bl	8004538 <scalbnf>
 8004242:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80042a0 <__kernel_rem_pio2f+0x348>
 8004246:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	db19      	blt.n	8004284 <__kernel_rem_pio2f+0x32c>
 8004250:	eddf 7a12 	vldr	s15, [pc, #72]	; 800429c <__kernel_rem_pio2f+0x344>
 8004254:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004258:	aa06      	add	r2, sp, #24
 800425a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800425e:	1c7c      	adds	r4, r7, #1
 8004260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004264:	3508      	adds	r5, #8
 8004266:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800426a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004272:	ee10 3a10 	vmov	r3, s0
 8004276:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800427a:	ee17 3a90 	vmov	r3, s15
 800427e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004282:	e7be      	b.n	8004202 <__kernel_rem_pio2f+0x2aa>
 8004284:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004288:	aa06      	add	r2, sp, #24
 800428a:	ee10 3a10 	vmov	r3, s0
 800428e:	463c      	mov	r4, r7
 8004290:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8004294:	e7b5      	b.n	8004202 <__kernel_rem_pio2f+0x2aa>
 8004296:	bf00      	nop
 8004298:	08004a10 	.word	0x08004a10
 800429c:	3b800000 	.word	0x3b800000
 80042a0:	43800000 	.word	0x43800000
 80042a4:	080049e4 	.word	0x080049e4
 80042a8:	00000000 	.word	0x00000000
 80042ac:	a906      	add	r1, sp, #24
 80042ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80042b2:	9101      	str	r1, [sp, #4]
 80042b4:	ee07 1a90 	vmov	s15, r1
 80042b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042bc:	3a01      	subs	r2, #1
 80042be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80042c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80042c6:	ed60 7a01 	vstmdb	r0!, {s15}
 80042ca:	e7a6      	b.n	800421a <__kernel_rem_pio2f+0x2c2>
 80042cc:	ecf7 6a01 	vldmia	r7!, {s13}
 80042d0:	ecb5 7a01 	vldmia	r5!, {s14}
 80042d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80042d8:	3001      	adds	r0, #1
 80042da:	4550      	cmp	r0, sl
 80042dc:	dc01      	bgt.n	80042e2 <__kernel_rem_pio2f+0x38a>
 80042de:	4290      	cmp	r0, r2
 80042e0:	ddf4      	ble.n	80042cc <__kernel_rem_pio2f+0x374>
 80042e2:	ecee 7a01 	vstmia	lr!, {s15}
 80042e6:	3201      	adds	r2, #1
 80042e8:	e79c      	b.n	8004224 <__kernel_rem_pio2f+0x2cc>
 80042ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80042ec:	2a03      	cmp	r2, #3
 80042ee:	d843      	bhi.n	8004378 <__kernel_rem_pio2f+0x420>
 80042f0:	e8df f002 	tbb	[pc, r2]
 80042f4:	021d1d37 	.word	0x021d1d37
 80042f8:	aa2e      	add	r2, sp, #184	; 0xb8
 80042fa:	4413      	add	r3, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4620      	mov	r0, r4
 8004300:	2800      	cmp	r0, #0
 8004302:	dc55      	bgt.n	80043b0 <__kernel_rem_pio2f+0x458>
 8004304:	461a      	mov	r2, r3
 8004306:	4620      	mov	r0, r4
 8004308:	2801      	cmp	r0, #1
 800430a:	dc61      	bgt.n	80043d0 <__kernel_rem_pio2f+0x478>
 800430c:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8004310:	2c01      	cmp	r4, #1
 8004312:	dc6d      	bgt.n	80043f0 <__kernel_rem_pio2f+0x498>
 8004314:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004318:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800431c:	2e00      	cmp	r6, #0
 800431e:	d16d      	bne.n	80043fc <__kernel_rem_pio2f+0x4a4>
 8004320:	edcb 6a00 	vstr	s13, [fp]
 8004324:	ed8b 7a01 	vstr	s14, [fp, #4]
 8004328:	edcb 7a02 	vstr	s15, [fp, #8]
 800432c:	e024      	b.n	8004378 <__kernel_rem_pio2f+0x420>
 800432e:	aa2e      	add	r2, sp, #184	; 0xb8
 8004330:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8004334:	4413      	add	r3, r2
 8004336:	4622      	mov	r2, r4
 8004338:	2a00      	cmp	r2, #0
 800433a:	da2a      	bge.n	8004392 <__kernel_rem_pio2f+0x43a>
 800433c:	b37e      	cbz	r6, 800439e <__kernel_rem_pio2f+0x446>
 800433e:	eef1 7a47 	vneg.f32	s15, s14
 8004342:	edcb 7a00 	vstr	s15, [fp]
 8004346:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800434a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800434e:	aa2f      	add	r2, sp, #188	; 0xbc
 8004350:	2301      	movs	r3, #1
 8004352:	429c      	cmp	r4, r3
 8004354:	da26      	bge.n	80043a4 <__kernel_rem_pio2f+0x44c>
 8004356:	b10e      	cbz	r6, 800435c <__kernel_rem_pio2f+0x404>
 8004358:	eef1 7a67 	vneg.f32	s15, s15
 800435c:	edcb 7a01 	vstr	s15, [fp, #4]
 8004360:	e00a      	b.n	8004378 <__kernel_rem_pio2f+0x420>
 8004362:	aa2e      	add	r2, sp, #184	; 0xb8
 8004364:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 80042a8 <__kernel_rem_pio2f+0x350>
 8004368:	4413      	add	r3, r2
 800436a:	2c00      	cmp	r4, #0
 800436c:	da0b      	bge.n	8004386 <__kernel_rem_pio2f+0x42e>
 800436e:	b10e      	cbz	r6, 8004374 <__kernel_rem_pio2f+0x41c>
 8004370:	eef1 7a67 	vneg.f32	s15, s15
 8004374:	edcb 7a00 	vstr	s15, [fp]
 8004378:	f009 0007 	and.w	r0, r9, #7
 800437c:	b057      	add	sp, #348	; 0x15c
 800437e:	ecbd 8b04 	vpop	{d8-d9}
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	ed33 7a01 	vldmdb	r3!, {s14}
 800438a:	3c01      	subs	r4, #1
 800438c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004390:	e7eb      	b.n	800436a <__kernel_rem_pio2f+0x412>
 8004392:	ed73 7a01 	vldmdb	r3!, {s15}
 8004396:	3a01      	subs	r2, #1
 8004398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800439c:	e7cc      	b.n	8004338 <__kernel_rem_pio2f+0x3e0>
 800439e:	eef0 7a47 	vmov.f32	s15, s14
 80043a2:	e7ce      	b.n	8004342 <__kernel_rem_pio2f+0x3ea>
 80043a4:	ecb2 7a01 	vldmia	r2!, {s14}
 80043a8:	3301      	adds	r3, #1
 80043aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ae:	e7d0      	b.n	8004352 <__kernel_rem_pio2f+0x3fa>
 80043b0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80043b4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80043b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80043bc:	3801      	subs	r0, #1
 80043be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80043ca:	ed02 7a01 	vstr	s14, [r2, #-4]
 80043ce:	e797      	b.n	8004300 <__kernel_rem_pio2f+0x3a8>
 80043d0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80043d4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80043d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80043dc:	3801      	subs	r0, #1
 80043de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ed62 7a01 	vstmdb	r2!, {s15}
 80043ea:	ed02 7a01 	vstr	s14, [r2, #-4]
 80043ee:	e78b      	b.n	8004308 <__kernel_rem_pio2f+0x3b0>
 80043f0:	ed33 7a01 	vldmdb	r3!, {s14}
 80043f4:	3c01      	subs	r4, #1
 80043f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043fa:	e789      	b.n	8004310 <__kernel_rem_pio2f+0x3b8>
 80043fc:	eef1 6a66 	vneg.f32	s13, s13
 8004400:	eeb1 7a47 	vneg.f32	s14, s14
 8004404:	edcb 6a00 	vstr	s13, [fp]
 8004408:	ed8b 7a01 	vstr	s14, [fp, #4]
 800440c:	eef1 7a67 	vneg.f32	s15, s15
 8004410:	e78a      	b.n	8004328 <__kernel_rem_pio2f+0x3d0>
 8004412:	bf00      	nop

08004414 <__kernel_sinf>:
 8004414:	ee10 3a10 	vmov	r3, s0
 8004418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800441c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004420:	da04      	bge.n	800442c <__kernel_sinf+0x18>
 8004422:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004426:	ee17 3a90 	vmov	r3, s15
 800442a:	b35b      	cbz	r3, 8004484 <__kernel_sinf+0x70>
 800442c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004430:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004488 <__kernel_sinf+0x74>
 8004434:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800448c <__kernel_sinf+0x78>
 8004438:	eea7 6a27 	vfma.f32	s12, s14, s15
 800443c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004490 <__kernel_sinf+0x7c>
 8004440:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004444:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004494 <__kernel_sinf+0x80>
 8004448:	eea7 6a27 	vfma.f32	s12, s14, s15
 800444c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004498 <__kernel_sinf+0x84>
 8004450:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004454:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004458:	b930      	cbnz	r0, 8004468 <__kernel_sinf+0x54>
 800445a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800449c <__kernel_sinf+0x88>
 800445e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004462:	eea6 0a86 	vfma.f32	s0, s13, s12
 8004466:	4770      	bx	lr
 8004468:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800446c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004470:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004474:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8004478:	eddf 7a09 	vldr	s15, [pc, #36]	; 80044a0 <__kernel_sinf+0x8c>
 800447c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004480:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	2f2ec9d3 	.word	0x2f2ec9d3
 800448c:	b2d72f34 	.word	0xb2d72f34
 8004490:	3638ef1b 	.word	0x3638ef1b
 8004494:	b9500d01 	.word	0xb9500d01
 8004498:	3c088889 	.word	0x3c088889
 800449c:	be2aaaab 	.word	0xbe2aaaab
 80044a0:	3e2aaaab 	.word	0x3e2aaaab

080044a4 <fabsf>:
 80044a4:	ee10 3a10 	vmov	r3, s0
 80044a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044ac:	ee00 3a10 	vmov	s0, r3
 80044b0:	4770      	bx	lr
	...

080044b4 <floorf>:
 80044b4:	ee10 3a10 	vmov	r3, s0
 80044b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044bc:	0dca      	lsrs	r2, r1, #23
 80044be:	3a7f      	subs	r2, #127	; 0x7f
 80044c0:	2a16      	cmp	r2, #22
 80044c2:	dc2a      	bgt.n	800451a <floorf+0x66>
 80044c4:	2a00      	cmp	r2, #0
 80044c6:	da11      	bge.n	80044ec <floorf+0x38>
 80044c8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800452c <floorf+0x78>
 80044cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80044d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	dd05      	ble.n	80044e6 <floorf+0x32>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da23      	bge.n	8004526 <floorf+0x72>
 80044de:	4a14      	ldr	r2, [pc, #80]	; (8004530 <floorf+0x7c>)
 80044e0:	2900      	cmp	r1, #0
 80044e2:	bf18      	it	ne
 80044e4:	4613      	movne	r3, r2
 80044e6:	ee00 3a10 	vmov	s0, r3
 80044ea:	4770      	bx	lr
 80044ec:	4911      	ldr	r1, [pc, #68]	; (8004534 <floorf+0x80>)
 80044ee:	4111      	asrs	r1, r2
 80044f0:	420b      	tst	r3, r1
 80044f2:	d0fa      	beq.n	80044ea <floorf+0x36>
 80044f4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800452c <floorf+0x78>
 80044f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80044fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	ddef      	ble.n	80044e6 <floorf+0x32>
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfbe      	ittt	lt
 800450a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800450e:	fa40 f202 	asrlt.w	r2, r0, r2
 8004512:	189b      	addlt	r3, r3, r2
 8004514:	ea23 0301 	bic.w	r3, r3, r1
 8004518:	e7e5      	b.n	80044e6 <floorf+0x32>
 800451a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800451e:	d3e4      	bcc.n	80044ea <floorf+0x36>
 8004520:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004524:	4770      	bx	lr
 8004526:	2300      	movs	r3, #0
 8004528:	e7dd      	b.n	80044e6 <floorf+0x32>
 800452a:	bf00      	nop
 800452c:	7149f2ca 	.word	0x7149f2ca
 8004530:	bf800000 	.word	0xbf800000
 8004534:	007fffff 	.word	0x007fffff

08004538 <scalbnf>:
 8004538:	b508      	push	{r3, lr}
 800453a:	ee10 2a10 	vmov	r2, s0
 800453e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004542:	ed2d 8b02 	vpush	{d8}
 8004546:	eef0 0a40 	vmov.f32	s1, s0
 800454a:	d004      	beq.n	8004556 <scalbnf+0x1e>
 800454c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004550:	d306      	bcc.n	8004560 <scalbnf+0x28>
 8004552:	ee70 0a00 	vadd.f32	s1, s0, s0
 8004556:	ecbd 8b02 	vpop	{d8}
 800455a:	eeb0 0a60 	vmov.f32	s0, s1
 800455e:	bd08      	pop	{r3, pc}
 8004560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004564:	d21c      	bcs.n	80045a0 <scalbnf+0x68>
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <scalbnf+0xac>)
 8004568:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80045e8 <scalbnf+0xb0>
 800456c:	4298      	cmp	r0, r3
 800456e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004572:	db10      	blt.n	8004596 <scalbnf+0x5e>
 8004574:	ee10 2a90 	vmov	r2, s1
 8004578:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800457c:	3b19      	subs	r3, #25
 800457e:	4403      	add	r3, r0
 8004580:	2bfe      	cmp	r3, #254	; 0xfe
 8004582:	dd0f      	ble.n	80045a4 <scalbnf+0x6c>
 8004584:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80045ec <scalbnf+0xb4>
 8004588:	eeb0 0a48 	vmov.f32	s0, s16
 800458c:	f000 f834 	bl	80045f8 <copysignf>
 8004590:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004594:	e7df      	b.n	8004556 <scalbnf+0x1e>
 8004596:	eddf 7a16 	vldr	s15, [pc, #88]	; 80045f0 <scalbnf+0xb8>
 800459a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800459e:	e7da      	b.n	8004556 <scalbnf+0x1e>
 80045a0:	0ddb      	lsrs	r3, r3, #23
 80045a2:	e7ec      	b.n	800457e <scalbnf+0x46>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dd06      	ble.n	80045b6 <scalbnf+0x7e>
 80045a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80045ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80045b0:	ee00 3a90 	vmov	s1, r3
 80045b4:	e7cf      	b.n	8004556 <scalbnf+0x1e>
 80045b6:	f113 0f16 	cmn.w	r3, #22
 80045ba:	da06      	bge.n	80045ca <scalbnf+0x92>
 80045bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80045c0:	4298      	cmp	r0, r3
 80045c2:	dcdf      	bgt.n	8004584 <scalbnf+0x4c>
 80045c4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80045f0 <scalbnf+0xb8>
 80045c8:	e7de      	b.n	8004588 <scalbnf+0x50>
 80045ca:	3319      	adds	r3, #25
 80045cc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80045d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80045d4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80045f4 <scalbnf+0xbc>
 80045d8:	ee07 3a10 	vmov	s14, r3
 80045dc:	ee67 0a27 	vmul.f32	s1, s14, s15
 80045e0:	e7b9      	b.n	8004556 <scalbnf+0x1e>
 80045e2:	bf00      	nop
 80045e4:	ffff3cb0 	.word	0xffff3cb0
 80045e8:	4c000000 	.word	0x4c000000
 80045ec:	7149f2ca 	.word	0x7149f2ca
 80045f0:	0da24260 	.word	0x0da24260
 80045f4:	33000000 	.word	0x33000000

080045f8 <copysignf>:
 80045f8:	ee10 3a10 	vmov	r3, s0
 80045fc:	ee10 2a90 	vmov	r2, s1
 8004600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004604:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004608:	4313      	orrs	r3, r2
 800460a:	ee00 3a10 	vmov	s0, r3
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
